.TH "kinetic_operation.c" 3 "Wed Nov 5 2014" "Version v0.8.0" "kinetic-c" \" -*- nroff -*-
.ad l
.nh
.SH NAME
kinetic_operation.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'kinetic_operation\&.h'\fP
.br
\fC#include 'kinetic_connection\&.h'\fP
.br
\fC#include 'kinetic_message\&.h'\fP
.br
\fC#include 'kinetic_pdu\&.h'\fP
.br
\fC#include 'kinetic_nbo\&.h'\fP
.br
\fC#include 'kinetic_socket\&.h'\fP
.br
\fC#include 'kinetic_allocator\&.h'\fP
.br
\fC#include 'kinetic_logger\&.h'\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <sys/time\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "\fBKineticStatus\fP \fBKineticOperation_SendRequest\fP (KineticOperation *const operation)"
.br
.ti -1c
.RI "\fBKineticStatus\fP \fBKineticOperation_GetStatus\fP (const KineticOperation *const operation)"
.br
.ti -1c
.RI "KineticOperation * \fBKineticOperation_AssociateResponseWithOperation\fP (KineticPDU *response)"
.br
.ti -1c
.RI "\fBKineticStatus\fP \fBKineticOperation_ReceiveAsync\fP (KineticOperation *const operation)"
.br
.ti -1c
.RI "\fBKineticStatus\fP \fBKineticOperation_NoopCallback\fP (KineticOperation *operation)"
.br
.ti -1c
.RI "void \fBKineticOperation_BuildNoop\fP (KineticOperation *const operation)"
.br
.ti -1c
.RI "\fBKineticStatus\fP \fBKineticOperation_PutCallback\fP (KineticOperation *operation)"
.br
.ti -1c
.RI "void \fBKineticOperation_BuildPut\fP (KineticOperation *const operation, \fBKineticEntry\fP *const entry)"
.br
.ti -1c
.RI "\fBKineticStatus\fP \fBKineticOperation_GetCallback\fP (KineticOperation *operation)"
.br
.ti -1c
.RI "void \fBKineticOperation_BuildGet\fP (KineticOperation *const operation, \fBKineticEntry\fP *const entry)"
.br
.ti -1c
.RI "\fBKineticStatus\fP \fBKineticOperation_DeleteCallback\fP (KineticOperation *operation)"
.br
.ti -1c
.RI "void \fBKineticOperation_BuildDelete\fP (KineticOperation *const operation, \fBKineticEntry\fP *const entry)"
.br
.ti -1c
.RI "\fBKineticStatus\fP \fBKineticOperation_GetKeyRangeCallback\fP (KineticOperation *operation)"
.br
.ti -1c
.RI "void \fBKineticOperation_BuildGetKeyRange\fP (KineticOperation *const operation, \fBKineticKeyRange\fP *range, \fBByteBufferArray\fP *buffers)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "\fBKineticStatus\fP KineticOperation_SendRequest (KineticOperation *constoperation)"

.PP
Definition at line 34 of file kinetic_operation\&.c\&.
.PP
References ByteBuffer_Create(), KINETIC_PROTO_COMMAND_SECURITY_ACL_HMACALGORITHM_HmacSHA1, KINETIC_STATUS_INVALID, KINETIC_STATUS_SUCCESS, KineticHMAC_Init(), KineticHMAC_Populate(), KineticLogger_LogByteArray(), KineticLogger_LogHeader(), KineticLogger_LogProtobuf(), KineticNBO_FromHostU32(), KineticPDUHeader, KineticProto_command__get_packed_size(), KineticProto_command__pack(), KineticProto_Message__get_packed_size(), KineticSocket_Write(), KineticSocket_WriteProtobuf(), LOG0, LOG1, LOG2, and LOGF1\&.
.SS "\fBKineticStatus\fP KineticOperation_GetStatus (const KineticOperation *constoperation)"

.PP
Definition at line 114 of file kinetic_operation\&.c\&.
.PP
References KINETIC_STATUS_INVALID, and KineticPDU_GetStatus()\&.
.SS "KineticOperation* KineticOperation_AssociateResponseWithOperation (KineticPDU *response)"

.PP
Definition at line 123 of file kinetic_operation\&.c\&.
.PP
References KINETIC_PDU_TYPE_REQUEST, KINETIC_PDU_TYPE_RESPONSE, KineticAllocator_GetFirstOperation(), KineticAllocator_GetNextOperation(), LOG0, LOG2, and LOGF2\&.
.SS "\fBKineticStatus\fP KineticOperation_ReceiveAsync (KineticOperation *constoperation)"

.PP
Definition at line 162 of file kinetic_operation\&.c\&.
.PP
References Kinetic_GetStatusDescription(), KINETIC_PDU_RECEIVE_TIMEOUT_SECS, KINETIC_STATUS_CONNECTION_ERROR, KINETIC_STATUS_SOCKET_TIMEOUT, KINETIC_STATUS_SUCCESS, KineticAllocator_FreeOperation(), KineticPDU_GetStatus(), LOG0, LOGF1, and LOGF2\&.
.SS "\fBKineticStatus\fP KineticOperation_NoopCallback (KineticOperation *operation)"

.PP
Definition at line 220 of file kinetic_operation\&.c\&.
.PP
References KINETIC_STATUS_SUCCESS, and LOGF3\&.
.SS "void KineticOperation_BuildNoop (KineticOperation *constoperation)"

.PP
Definition at line 229 of file kinetic_operation\&.c\&.
.PP
References KINETIC_PROTO_COMMAND_MESSAGE_TYPE_NOOP, KineticConnection_IncrementSequence(), and KineticOperation_NoopCallback()\&.
.SS "\fBKineticStatus\fP KineticOperation_PutCallback (KineticOperation *operation)"

.PP
Definition at line 240 of file kinetic_operation\&.c\&.
.PP
References ByteBuffer::array, BYTE_BUFFER_NONE, ByteBuffer_Append(), ByteBuffer_Reset(), ByteBuffer::bytesUsed, ByteArray::data, KineticEntry::dbVersion, KINETIC_STATUS_SUCCESS, ByteArray::len, LOGF3, and KineticEntry::newVersion\&.
.SS "void KineticOperation_BuildPut (KineticOperation *constoperation, \fBKineticEntry\fP *constentry)"

.PP
Definition at line 268 of file kinetic_operation\&.c\&.
.PP
References KINETIC_PROTO_COMMAND_MESSAGE_TYPE_PUT, KineticConnection_IncrementSequence(), KineticMessage_ConfigureKeyValue(), and KineticOperation_PutCallback()\&.
.SS "\fBKineticStatus\fP KineticOperation_GetCallback (KineticOperation *operation)"

.PP
Definition at line 285 of file kinetic_operation\&.c\&.
.PP
References Copy_KineticProto_Command_KeyValue_to_KineticEntry(), KINETIC_STATUS_BUFFER_OVERRUN, KINETIC_STATUS_SUCCESS, KineticPDU_GetKeyValue(), and LOGF3\&.
.SS "void KineticOperation_BuildGet (KineticOperation *constoperation, \fBKineticEntry\fP *constentry)"

.PP
Definition at line 306 of file kinetic_operation\&.c\&.
.PP
References ByteBuffer_Reset(), KINETIC_PROTO_COMMAND_MESSAGE_TYPE_GET, KineticConnection_IncrementSequence(), KineticMessage_ConfigureKeyValue(), KineticOperation_GetCallback(), and KineticEntry::metadataOnly\&.
.SS "\fBKineticStatus\fP KineticOperation_DeleteCallback (KineticOperation *operation)"

.PP
Definition at line 327 of file kinetic_operation\&.c\&.
.PP
References KINETIC_STATUS_SUCCESS, and LOGF3\&.
.SS "void KineticOperation_BuildDelete (KineticOperation *constoperation, \fBKineticEntry\fP *constentry)"

.PP
Definition at line 337 of file kinetic_operation\&.c\&.
.PP
References ByteBuffer_Reset(), KINETIC_PROTO_COMMAND_MESSAGE_TYPE_DELETE, KineticConnection_IncrementSequence(), KineticMessage_ConfigureKeyValue(), and KineticOperation_DeleteCallback()\&.
.SS "\fBKineticStatus\fP KineticOperation_GetKeyRangeCallback (KineticOperation *operation)"

.PP
Definition at line 358 of file kinetic_operation\&.c\&.
.PP
References Copy_KineticProto_Command_Range_to_ByteBufferArray(), KINETIC_STATUS_BUFFER_OVERRUN, KINETIC_STATUS_SUCCESS, KineticPDU_GetKeyRange(), and LOGF3\&.
.SS "void KineticOperation_BuildGetKeyRange (KineticOperation *constoperation, \fBKineticKeyRange\fP *range, \fBByteBufferArray\fP *buffers)"

.PP
Definition at line 377 of file kinetic_operation\&.c\&.
.PP
References KINETIC_PROTO_COMMAND_MESSAGE_TYPE_GETKEYRANGE, KineticConnection_IncrementSequence(), KineticMessage_ConfigureKeyRange(), and KineticOperation_GetKeyRangeCallback()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for kinetic-c from the source code\&.
