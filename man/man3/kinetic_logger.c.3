.TH "kinetic_logger.c" 3 "Wed Feb 11 2015" "Version v0.11.1" "kinetic-c" \" -*- nroff -*-
.ad l
.nh
.SH NAME
kinetic_logger.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'kinetic_logger\&.h'\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <sys/time\&.h>\fP
.br
\fC#include <errno\&.h>\fP
.br
\fC#include <pthread\&.h>\fP
.br
\fC#include <time\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBKINETIC_LOGGER_BUFFER_STR_MAX_LEN\fP   512"
.br
.ti -1c
.RI "#define \fBKINETIC_LOGGER_BUFFER_SIZE\fP   (0x1 << 12)"
.br
.ti -1c
.RI "#define \fBKINETIC_LOGGER_FLUSH_INTERVAL_SEC\fP   180"
.br
.ti -1c
.RI "#define \fBKINETIC_LOGGER_SLEEP_TIME_SEC\fP   10"
.br
.ti -1c
.RI "#define \fBKINETIC_LOGGER_BUFFER_FLUSH_SIZE\fP   (0\&.8 * \fBKINETIC_LOGGER_BUFFER_SIZE\fP)"
.br
.ti -1c
.RI "#define \fBLOG_INDENT\fP   '  '"
.br
.ti -1c
.RI "#define \fBLOG_PROTO_INIT\fP()   indent_overflow = 0;"
.br
.ti -1c
.RI "#define \fBLOG_PROTO_LEVEL_START\fP(__name)"
.br
.ti -1c
.RI "#define \fBLOG_PROTO_LEVEL_END\fP()"
.br
.ti -1c
.RI "#define \fBLOG_PROTO_LEVEL_START_ARRAY\fP(__name, __quantity)"
.br
.ti -1c
.RI "#define \fBLOG_PROTO_LEVEL_END_ARRAY\fP()"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBKineticLogger_Init\fP (const char *log_file, int log_level)"
.br
.ti -1c
.RI "void \fBKineticLogger_Close\fP (void)"
.br
.ti -1c
.RI "void \fBKineticLogger_Log\fP (int log_level, const char *message)"
.br
.ti -1c
.RI "void \fBKineticLogger_LogPrintf\fP (int log_level, const char *format,\&.\&.\&.)"
.br
.ti -1c
.RI "void \fBKineticLogger_LogLocation\fP (const char *filename, int line, const char *message)"
.br
.ti -1c
.RI "void \fBKineticLogger_LogHeader\fP (int log_level, const \fBKineticPDUHeader\fP *header)"
.br
.ti -1c
.RI "int \fBKineticLogger_ByteArraySliceToCString\fP (char *p_buf, const \fBByteArray\fP bytes, const int start, const int count)"
.br
.ti -1c
.RI "void \fBKineticLogger_LogProtobuf\fP (int log_level, const KineticProto_Message *msg)"
.br
.ti -1c
.RI "void \fBKineticLogger_LogStatus\fP (int log_level, KineticProto_Command_Status *status)"
.br
.ti -1c
.RI "void \fBKineticLogger_LogByteArray\fP (int log_level, const char *title, \fBByteArray\fP bytes)"
.br
.ti -1c
.RI "void \fBKineticLogger_LogByteBuffer\fP (int log_level, const char *title, \fBByteBuffer\fP buffer)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define KINETIC_LOGGER_BUFFER_STR_MAX_LEN   512"

.PP
Definition at line 31 of file kinetic_logger\&.c\&.
.SS "#define KINETIC_LOGGER_BUFFER_SIZE   (0x1 << 12)"

.PP
Definition at line 32 of file kinetic_logger\&.c\&.
.SS "#define KINETIC_LOGGER_FLUSH_INTERVAL_SEC   180"

.PP
Definition at line 33 of file kinetic_logger\&.c\&.
.SS "#define KINETIC_LOGGER_SLEEP_TIME_SEC   10"

.PP
Definition at line 34 of file kinetic_logger\&.c\&.
.SS "#define KINETIC_LOGGER_BUFFER_FLUSH_SIZE   (0\&.8 * \fBKINETIC_LOGGER_BUFFER_SIZE\fP)"

.PP
Definition at line 35 of file kinetic_logger\&.c\&.
.SS "#define LOG_INDENT   '  '"

.PP
Definition at line 180 of file kinetic_logger\&.c\&.
.SS "#define LOG_PROTO_INIT()   indent_overflow = 0;"

.PP
Definition at line 185 of file kinetic_logger\&.c\&.
.SS "#define LOG_PROTO_LEVEL_START(__name)"
\fBValue:\fP
.PP
.nf
KineticLogger_LogPrintf(0, "%s%s {", indent, __name); \
    if (strlen(indent) < max_indent) { strcat(indent, LOG_INDENT); } \
    else { indent_overflow++; }
.fi
.PP
Definition at line 188 of file kinetic_logger\&.c\&.
.SS "#define LOG_PROTO_LEVEL_END()"
\fBValue:\fP
.PP
.nf
if (indent_overflow == 0) { indent[strlen(indent) - 2] = '\0'; } \
    else { indent_overflow--; } \\
    KineticLogger_LogPrintf(0, "%s}", indent);
.fi
.PP
Definition at line 193 of file kinetic_logger\&.c\&.
.SS "#define LOG_PROTO_LEVEL_START_ARRAY(__name, __quantity)"
\fBValue:\fP
.PP
.nf
KineticLogger_LogPrintf(0, "%s%s: (%u elements)", (indent), (__name), (__quantity)); \\
    KineticLogger_LogPrintf(0, "%s[", (indent)); \
    if (strlen(indent) < max_indent) { strcat(indent, LOG_INDENT); } \
    else { indent_overflow++; }
.fi
.PP
Definition at line 198 of file kinetic_logger\&.c\&.
.SS "#define LOG_PROTO_LEVEL_END_ARRAY()"
\fBValue:\fP
.PP
.nf
if (indent_overflow == 0) { indent[strlen(indent) - 2] = '\0'; } \
    else { indent_overflow--; } \\
    KineticLogger_LogPrintf(0, "%s]", (indent));
.fi
.PP
Definition at line 204 of file kinetic_logger\&.c\&.
.SH "Function Documentation"
.PP 
.SS "void KineticLogger_Init (const char *log_file, intlog_level)"

.PP
Definition at line 71 of file kinetic_logger\&.c\&.
.SS "void KineticLogger_Close (void)"

.PP
Definition at line 101 of file kinetic_logger\&.c\&.
.PP
References Kinetic_GetErrnoDescription(), and LOGF0\&.
.SS "void KineticLogger_Log (intlog_level, const char *message)"

.PP
Definition at line 121 of file kinetic_logger\&.c\&.
.PP
References KINETIC_LOGGER_BUFFER_STR_MAX_LEN\&.
.SS "void KineticLogger_LogPrintf (intlog_level, const char *format, \&.\&.\&.)"

.PP
Definition at line 133 of file kinetic_logger\&.c\&.
.PP
References KINETIC_LOGGER_BUFFER_STR_MAX_LEN\&.
.SS "void KineticLogger_LogLocation (const char *filename, intline, const char *message)"

.PP
Definition at line 151 of file kinetic_logger\&.c\&.
.PP
References KineticLogger_LogPrintf()\&.
.SS "void KineticLogger_LogHeader (intlog_level, const \fBKineticPDUHeader\fP *header)"

.PP
Definition at line 167 of file kinetic_logger\&.c\&.
.PP
References KineticLogger_Log(), and KineticLogger_LogPrintf()\&.
.SS "int KineticLogger_ByteArraySliceToCString (char *p_buf, const \fBByteArray\fPbytes, const intstart, const intcount)"

.PP
Definition at line 229 of file kinetic_logger\&.c\&.
.PP
References ByteArray::data\&.
.SS "void KineticLogger_LogProtobuf (intlog_level, const KineticProto_Message *msg)"

.PP
Definition at line 411 of file kinetic_logger\&.c\&.
.PP
References KineticLogger_Log(), and LOG_PROTO_INIT\&.
.SS "void KineticLogger_LogStatus (intlog_level, KineticProto_Command_Status *status)"

.PP
Definition at line 423 of file kinetic_logger\&.c\&.
.PP
References KINETIC_PROTO_COMMAND_STATUS_STATUS_CODE_INVALID_STATUS_CODE, KINETIC_PROTO_COMMAND_STATUS_STATUS_CODE_SUCCESS, and KineticLogger_LogPrintf()\&.
.SS "void KineticLogger_LogByteArray (intlog_level, const char *title, \fBByteArray\fPbytes)"

.PP
Definition at line 480 of file kinetic_logger\&.c\&.
.PP
References ByteArray::data, KineticLogger_LogPrintf(), and ByteArray::len\&.
.SS "void KineticLogger_LogByteBuffer (intlog_level, const char *title, \fBByteBuffer\fPbuffer)"

.PP
Definition at line 524 of file kinetic_logger\&.c\&.
.PP
References ByteBuffer::array, ByteBuffer::bytesUsed, ByteArray::data, and KineticLogger_LogByteArray()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for kinetic-c from the source code\&.
