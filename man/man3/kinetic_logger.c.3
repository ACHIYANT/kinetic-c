.TH "kinetic_logger.c" 3 "Wed Oct 15 2014" "Version v0.7.0" "protobuf-c" \" -*- nroff -*-
.ad l
.nh
.SH NAME
kinetic_logger.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'kinetic_logger\&.h'\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBLOG_PROTO_INIT\fP()"
.br
.ti -1c
.RI "#define \fBLOG_PROTO_LEVEL_START\fP(name)"
.br
.ti -1c
.RI "#define \fBLOG_PROTO_LEVEL_END\fP()"
.br
.ti -1c
.RI "#define \fBBYTES_TO_CSTRING\fP(_buf_start, _array, _array_start, _count)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBKineticLogger_Init\fP (const char *logFile)"
.br
.ti -1c
.RI "void \fBKineticLogger_Close\fP (void)"
.br
.ti -1c
.RI "void \fBKineticLogger_Log\fP (const char *message)"
.br
.ti -1c
.RI "int \fBKineticLogger_LogPrintf\fP (const char *format,\&.\&.\&.)"
.br
.ti -1c
.RI "void \fBKineticLogger_LogHeader\fP (const \fBKineticPDUHeader\fP *header)"
.br
.ti -1c
.RI "int \fBKineticLogger_u8toa\fP (char *p_buf, uint8_t val)"
.br
.ti -1c
.RI "int \fBKineticLogger_ByteArraySliceToCString\fP (char *p_buf, const \fBByteArray\fP bytes, const int start, const int count)"
.br
.ti -1c
.RI "void \fBKineticLogger_LogProtobuf\fP (const \fBKineticProto\fP *proto)"
.br
.ti -1c
.RI "void \fBKineticLogger_LogStatus\fP (KineticProto_Status *status)"
.br
.ti -1c
.RI "void \fBKineticLogger_LogByteArray\fP (const char *title, \fBByteArray\fP bytes)"
.br
.ti -1c
.RI "void \fBKineticLogger_LogByteBuffer\fP (const char *title, \fBByteBuffer\fP buffer)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "bool \fBLogToConsole\fP = true"
.br
.ti -1c
.RI "int \fBLogLevel\fP = 0"
.br
.ti -1c
.RI "FILE * \fBFileDesc\fP = NULL"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define LOG_PROTO_INIT()"
\fBValue:\fP
.PP
.nf
char _indent[32] = "  "; \
    const char* _str_true = "true"; \
    const char* _str_false = "false";
.fi
.PP
Definition at line 111 of file kinetic_logger\&.c\&.
.SS "#define LOG_PROTO_LEVEL_START(name)"
\fBValue:\fP
.PP
.nf
LOGF("%s" name " {", _indent); \
    strcat(_indent, "  ");
.fi
.PP
Definition at line 116 of file kinetic_logger\&.c\&.
.SS "#define LOG_PROTO_LEVEL_END()"
\fBValue:\fP
.PP
.nf
_indent[strlen(_indent) - 2] = '\0'; \\
    LOGF("%s}", _indent);
.fi
.PP
Definition at line 120 of file kinetic_logger\&.c\&.
.SS "#define BYTES_TO_CSTRING(_buf_start, _array, _array_start, _count)"
\fBValue:\fP
.PP
.nf
{ \
    ByteArray key = {\&.data = _array\&.data, \&.len = _array\&.len}; \\
    KineticLogger_ByteArraySliceToCString((char*)(_buf_start), key, 0, key\&.len); \
}
.fi
.PP
Definition at line 162 of file kinetic_logger\&.c\&.
.SH "Function Documentation"
.PP 
.SS "void KineticLogger_Init (const char *logFile)"

.PP
Definition at line 31 of file kinetic_logger\&.c\&.
.PP
References FileDesc, LogLevel, and LogToConsole\&.
.SS "void KineticLogger_Close (void)"

.PP
Definition at line 58 of file kinetic_logger\&.c\&.
.PP
References FileDesc, and LogToConsole\&.
.SS "void KineticLogger_Log (const char *message)"

.PP
Definition at line 67 of file kinetic_logger\&.c\&.
.PP
References FileDesc, LogLevel, and LogToConsole\&.
.SS "int KineticLogger_LogPrintf (const char *format, \&.\&.\&.)"

.PP
Definition at line 80 of file kinetic_logger\&.c\&.
.PP
References KineticLogger_Log(), and LogLevel\&.
.SS "void KineticLogger_LogHeader (const \fBKineticPDUHeader\fP *header)"

.PP
Definition at line 99 of file kinetic_logger\&.c\&.
.PP
References LOG, LOGF, and LogLevel\&.
.SS "int KineticLogger_u8toa (char *p_buf, uint8_tval)"

.PP
Definition at line 124 of file kinetic_logger\&.c\&.
.SS "int KineticLogger_ByteArraySliceToCString (char *p_buf, const \fBByteArray\fPbytes, const intstart, const intcount)"

.PP
Definition at line 145 of file kinetic_logger\&.c\&.
.PP
References ByteArray::data, and KineticLogger_u8toa()\&.
.SS "void KineticLogger_LogProtobuf (const \fBKineticProto\fP *proto)"

.PP
Definition at line 167 of file kinetic_logger\&.c\&.
.PP
References BYTES_TO_CSTRING, KineticProto_algorithm__descriptor, KineticProto_message_type__descriptor, KineticProto_status_status_code__descriptor, KineticProto_synchronization__descriptor, LOG, LOG_PROTO_INIT, LOG_PROTO_LEVEL_END, LOG_PROTO_LEVEL_START, LOGF, and LogLevel\&.
.SS "void KineticLogger_LogStatus (KineticProto_Status *status)"

.PP
Definition at line 320 of file kinetic_logger\&.c\&.
.PP
References KINETIC_PROTO_STATUS_STATUS_CODE_INVALID_STATUS_CODE, KINETIC_PROTO_STATUS_STATUS_CODE_SUCCESS, KineticLogger_LogPrintf(), and LogLevel\&.
.SS "void KineticLogger_LogByteArray (const char *title, \fBByteArray\fPbytes)"

.PP
Definition at line 377 of file kinetic_logger\&.c\&.
.PP
References ByteArray::data, ByteArray::len, LOGF, and LogLevel\&.
.SS "void KineticLogger_LogByteBuffer (const char *title, \fBByteBuffer\fPbuffer)"

.PP
Definition at line 422 of file kinetic_logger\&.c\&.
.PP
References ByteBuffer::array, ByteBuffer::bytesUsed, ByteArray::data, and KineticLogger_LogByteArray()\&.
.SH "Variable Documentation"
.PP 
.SS "bool LogToConsole = true"

.PP
Definition at line 27 of file kinetic_logger\&.c\&.
.SS "int LogLevel = 0"

.PP
Definition at line 28 of file kinetic_logger\&.c\&.
.SS "FILE* FileDesc = NULL"

.PP
Definition at line 29 of file kinetic_logger\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for protobuf-c from the source code\&.
