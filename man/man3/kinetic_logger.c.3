.TH "kinetic_logger.c" 3 "Tue Nov 4 2014" "Version v0.8.0" "kinetic-c" \" -*- nroff -*-
.ad l
.nh
.SH NAME
kinetic_logger.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'kinetic_logger\&.h'\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <sys/time\&.h>\fP
.br
\fC#include <errno\&.h>\fP
.br
\fC#include <pthread\&.h>\fP
.br
\fC#include <time\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBKINETIC_LOGGER_BUFFER_STR_MAX_LEN\fP   256"
.br
.ti -1c
.RI "#define \fBKINETIC_LOGGER_BUFFER_SIZE\fP   (0x1 << 12)"
.br
.ti -1c
.RI "#define \fBKINETIC_LOGGER_FLUSH_INTERVAL_SEC\fP   180"
.br
.ti -1c
.RI "#define \fBKINETIC_LOGGER_SLEEP_TIME_SEC\fP   10"
.br
.ti -1c
.RI "#define \fBKINETIC_LOGGER_BUFFER_FLUSH_SIZE\fP   (0\&.8 * \fBKINETIC_LOGGER_BUFFER_SIZE\fP)"
.br
.ti -1c
.RI "#define \fBLOG_PROTO_INIT\fP()   char _indent[32] = '  ';"
.br
.ti -1c
.RI "#define \fBLOG_PROTO_LEVEL_START\fP(__name)"
.br
.ti -1c
.RI "#define \fBLOG_PROTO_LEVEL_END\fP()"
.br
.ti -1c
.RI "#define \fBBYTES_TO_CSTRING\fP(_buf_start, _array, _array_start, _count)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBKineticLogger_Init\fP (const char *log_file, int log_level)"
.br
.ti -1c
.RI "void \fBKineticLogger_Close\fP (void)"
.br
.ti -1c
.RI "void \fBKineticLogger_Log\fP (int log_level, const char *message)"
.br
.ti -1c
.RI "void \fBKineticLogger_LogPrintf\fP (int log_level, const char *format,\&.\&.\&.)"
.br
.ti -1c
.RI "void \fBKineticLogger_LogLocation\fP (const char *filename, int line, const char *message)"
.br
.ti -1c
.RI "void \fBKineticLogger_LogHeader\fP (int log_level, const \fBKineticPDUHeader\fP *header)"
.br
.ti -1c
.RI "void \fBKineticLogger_LogProtobuf\fP (int log_level, const KineticProto_Message *msg)"
.br
.ti -1c
.RI "void \fBKineticLogger_LogStatus\fP (int log_level, KineticProto_Command_Status *status)"
.br
.ti -1c
.RI "void \fBKineticLogger_LogByteArray\fP (int log_level, const char *title, \fBByteArray\fP bytes)"
.br
.ti -1c
.RI "void \fBKineticLogger_LogByteBuffer\fP (int log_level, const char *title, \fBByteBuffer\fP buffer)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define KINETIC_LOGGER_BUFFER_STR_MAX_LEN   256"

.PP
Definition at line 33 of file kinetic_logger\&.c\&.
.SS "#define KINETIC_LOGGER_BUFFER_SIZE   (0x1 << 12)"

.PP
Definition at line 34 of file kinetic_logger\&.c\&.
.SS "#define KINETIC_LOGGER_FLUSH_INTERVAL_SEC   180"

.PP
Definition at line 35 of file kinetic_logger\&.c\&.
.SS "#define KINETIC_LOGGER_SLEEP_TIME_SEC   10"

.PP
Definition at line 36 of file kinetic_logger\&.c\&.
.SS "#define KINETIC_LOGGER_BUFFER_FLUSH_SIZE   (0\&.8 * \fBKINETIC_LOGGER_BUFFER_SIZE\fP)"

.PP
Definition at line 37 of file kinetic_logger\&.c\&.
.SS "#define LOG_PROTO_INIT()   char _indent[32] = '  ';"

.PP
Definition at line 180 of file kinetic_logger\&.c\&.
.SS "#define LOG_PROTO_LEVEL_START(__name)"
\fBValue:\fP
.PP
.nf
KineticLogger_LogPrintf(2, "%s%s {", (_indent), (__name)); \
    strcat(_indent, "  ");
.fi
.PP
Definition at line 182 of file kinetic_logger\&.c\&.
.SS "#define LOG_PROTO_LEVEL_END()"
\fBValue:\fP
.PP
.nf
_indent[strlen(_indent) - 2] = '\0'; \\
    KineticLogger_LogPrintf(2, "%s}", _indent);
.fi
.PP
Definition at line 186 of file kinetic_logger\&.c\&.
.SS "#define BYTES_TO_CSTRING(_buf_start, _array, _array_start, _count)"
\fBValue:\fP
.PP
.nf
{ \
    ByteArray __array = {\&.data = _array\&.data, \&.len = (_array)\&.len}; \
    KineticLogger_ByteArraySliceToCString((char*)(_buf_start), (__array), (_array_start), (_count)); \
}
.fi
.PP
Definition at line 222 of file kinetic_logger\&.c\&.
.SH "Function Documentation"
.PP 
.SS "void KineticLogger_Init (const char *log_file, intlog_level)"

.PP
Definition at line 72 of file kinetic_logger\&.c\&.
.SS "void KineticLogger_Close (void)"

.PP
Definition at line 102 of file kinetic_logger\&.c\&.
.PP
References Kinetic_GetErrnoDescription(), and LOGF0\&.
.SS "void KineticLogger_Log (intlog_level, const char *message)"

.PP
Definition at line 122 of file kinetic_logger\&.c\&.
.PP
References KINETIC_LOGGER_BUFFER_STR_MAX_LEN\&.
.SS "void KineticLogger_LogPrintf (intlog_level, const char *format, \&.\&.\&.)"

.PP
Definition at line 134 of file kinetic_logger\&.c\&.
.PP
References KINETIC_LOGGER_BUFFER_STR_MAX_LEN\&.
.SS "void KineticLogger_LogLocation (const char *filename, intline, const char *message)"

.PP
Definition at line 152 of file kinetic_logger\&.c\&.
.PP
References KineticLogger_LogPrintf()\&.
.SS "void KineticLogger_LogHeader (intlog_level, const \fBKineticPDUHeader\fP *header)"

.PP
Definition at line 168 of file kinetic_logger\&.c\&.
.PP
References KineticLogger_Log(), and KineticLogger_LogPrintf()\&.
.SS "void KineticLogger_LogProtobuf (intlog_level, const KineticProto_Message *msg)"

.PP
Definition at line 403 of file kinetic_logger\&.c\&.
.PP
References BOOL_TO_STRING, BYTES_TO_CSTRING, KINETIC_PROTO_MESSAGE_AUTH_TYPE_HMACAUTH, KINETIC_PROTO_MESSAGE_AUTH_TYPE_PINAUTH, KineticLogger_Log(), KineticLogger_LogPrintf(), KineticProto_command__unpack(), KineticProto_command_algorithm__descriptor, KineticProto_command_message_type__descriptor, KineticProto_command_priority__descriptor, KineticProto_command_status_status_code__descriptor, KineticProto_command_synchronization__descriptor, KineticProto_Message_auth_type__descriptor, LOG_PROTO_INIT, LOG_PROTO_LEVEL_END, and LOG_PROTO_LEVEL_START\&.
.SS "void KineticLogger_LogStatus (intlog_level, KineticProto_Command_Status *status)"

.PP
Definition at line 669 of file kinetic_logger\&.c\&.
.PP
References KINETIC_PROTO_COMMAND_STATUS_STATUS_CODE_INVALID_STATUS_CODE, KINETIC_PROTO_COMMAND_STATUS_STATUS_CODE_SUCCESS, and KineticLogger_LogPrintf()\&.
.SS "void KineticLogger_LogByteArray (intlog_level, const char *title, \fBByteArray\fPbytes)"

.PP
Definition at line 726 of file kinetic_logger\&.c\&.
.PP
References ByteArray::data, KineticLogger_LogPrintf(), and ByteArray::len\&.
.SS "void KineticLogger_LogByteBuffer (intlog_level, const char *title, \fBByteBuffer\fPbuffer)"

.PP
Definition at line 770 of file kinetic_logger\&.c\&.
.PP
References ByteBuffer::array, ByteBuffer::bytesUsed, ByteArray::data, and KineticLogger_LogByteArray()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for kinetic-c from the source code\&.
