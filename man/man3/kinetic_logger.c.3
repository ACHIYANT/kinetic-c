.TH "kinetic_logger.c" 3 "Fri Mar 13 2015" "Version v0.12.0" "kinetic-c" \" -*- nroff -*-
.ad l
.nh
.SH NAME
kinetic_logger.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'kinetic_logger\&.h'\fP
.br
\fC#include 'kinetic_version_info\&.h'\fP
.br
\fC#include <stdarg\&.h>\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <sys/time\&.h>\fP
.br
\fC#include <errno\&.h>\fP
.br
\fC#include <pthread\&.h>\fP
.br
\fC#include <time\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBBUFFER_SIZE\fP   1024"
.br
.ti -1c
.RI "#define \fBBUFFER_MAX_STRLEN\fP   (\fBBUFFER_SIZE\fP-2)"
.br
.ti -1c
.RI "#define \fBLOG_INDENT\fP   '  '"
.br
.ti -1c
.RI "#define \fBBOOL_TO_STRING\fP(_bool)   (_bool) ? 'true' : 'false'"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "static bool \fBis_level_enabled\fP (int log_level)"
.br
.ti -1c
.RI "static void \fBlock_buffer\fP (void)"
.br
.ti -1c
.RI "static void \fBunlock_buffer\fP (void)"
.br
.ti -1c
.RI "static void \fBflush_buffer\fP (void)"
.br
.ti -1c
.RI "static char * \fBget_buffer\fP (void)"
.br
.ti -1c
.RI "static void \fBfinish_buffer\fP (void)"
.br
.ti -1c
.RI "static void \fBlog_protobuf_message\fP (int log_level, const ProtobufCMessage *msg, char *\fBindent\fP)"
.br
.ti -1c
.RI "static void \fBlog_version_info\fP (void)"
.br
.ti -1c
.RI "void \fBKineticLogger_Init\fP (const char *log_file, int log_level)"
.br
.ti -1c
.RI "void \fBKineticLogger_Close\fP (void)"
.br
.ti -1c
.RI "void \fBKineticLogger_Log\fP (int log_level, const char *message)"
.br
.ti -1c
.RI "void \fBKineticLogger_LogPrintf\fP (int log_level, const char *format,\&.\&.\&.)"
.br
.ti -1c
.RI "void \fBKineticLogger_LogLocation\fP (const char *filename, int line, const char *message)"
.br
.ti -1c
.RI "void \fBKineticLogger_LogHeader\fP (int log_level, const \fBKineticPDUHeader\fP *header)"
.br
.ti -1c
.RI "static void \fBlog_proto_level_start\fP (const char *name)"
.br
.ti -1c
.RI "static void \fBlog_proto_level_end\fP (void)"
.br
.ti -1c
.RI "static void \fBlog_proto_level_start_array\fP (const char *name, unsigned quantity)"
.br
.ti -1c
.RI "static void \fBlog_proto_level_end_array\fP (void)"
.br
.ti -1c
.RI "static int \fBbytetoa\fP (char *p_buf, uint8_t val)"
.br
.ti -1c
.RI "int \fBKineticLogger_ByteArraySliceToCString\fP (char *p_buf, const \fBByteArray\fP bytes, const int start, const int count)"
.br
.ti -1c
.RI "static void \fBLogUnboxed\fP (int log_level, void const *const fieldData, ProtobufCFieldDescriptor const *const fieldDesc, size_t const i, char *log_indent)"
.br
.ti -1c
.RI "void \fBKineticLogger_LogProtobuf\fP (int log_level, const Com__Seagate__Kinetic__Proto__Message *msg)"
.br
.ti -1c
.RI "void \fBKineticLogger_LogStatus\fP (int log_level, Com__Seagate__Kinetic__Proto__Command__Status *status)"
.br
.ti -1c
.RI "void \fBKineticLogger_LogByteArray\fP (int log_level, const char *title, \fBByteArray\fP bytes)"
.br
.ti -1c
.RI "void \fBKineticLogger_LogByteBuffer\fP (int log_level, const char *title, \fBByteBuffer\fP buffer)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static int \fBKineticLogLevel\fP = -1"
.br
.ti -1c
.RI "static FILE * \fBKineticLoggerHandle\fP = NULL"
.br
.ti -1c
.RI "static pthread_mutex_t \fBBufferMutex\fP = PTHREAD_MUTEX_INITIALIZER"
.br
.ti -1c
.RI "static char \fBBuffer\fP [1024]"
.br
.ti -1c
.RI "static char \fBindent\fP [64] = ' '"
.br
.ti -1c
.RI "static const size_t \fBmax_indent\fP = sizeof(\fBindent\fP)-3"
.br
.ti -1c
.RI "static int \fBindent_overflow\fP = 0"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define BUFFER_SIZE   1024"

.PP
Definition at line 33 of file kinetic_logger\&.c\&.
.SS "#define BUFFER_MAX_STRLEN   (\fBBUFFER_SIZE\fP-2)"

.PP
Definition at line 34 of file kinetic_logger\&.c\&.
.SS "#define LOG_INDENT   '  '"

.PP
Definition at line 168 of file kinetic_logger\&.c\&.
.SS "#define BOOL_TO_STRING(_bool)   (_bool) ? 'true' : 'false'"

.PP
Definition at line 251 of file kinetic_logger\&.c\&.
.SH "Function Documentation"
.PP 
.SS "static bool is_level_enabled (intlog_level)\fC [inline]\fP, \fC [static]\fP"

.PP
Definition at line 548 of file kinetic_logger\&.c\&.
.SS "static void lock_buffer (void)\fC [inline]\fP, \fC [static]\fP"

.PP
Definition at line 553 of file kinetic_logger\&.c\&.
.PP
References BufferMutex\&.
.SS "static void unlock_buffer (void)\fC [inline]\fP, \fC [static]\fP"

.PP
Definition at line 558 of file kinetic_logger\&.c\&.
.PP
References BufferMutex\&.
.SS "static void flush_buffer (void)\fC [static]\fP"

.PP
Definition at line 563 of file kinetic_logger\&.c\&.
.PP
References Buffer, and KineticLoggerHandle\&.
.SS "static char * get_buffer (void)\fC [inline]\fP, \fC [static]\fP"

.PP
Definition at line 569 of file kinetic_logger\&.c\&.
.PP
References Buffer, and lock_buffer()\&.
.SS "static void finish_buffer (void)\fC [inline]\fP, \fC [static]\fP"

.PP
Definition at line 575 of file kinetic_logger\&.c\&.
.PP
References flush_buffer(), and unlock_buffer()\&.
.SS "static void log_protobuf_message (intlog_level, const ProtobufCMessage *msg, char *indent)\fC [static]\fP"

.PP
Definition at line 360 of file kinetic_logger\&.c\&.
.PP
References com__seagate__kinetic__proto__command__free_unpacked(), com__seagate__kinetic__proto__command__unpack(), is_level_enabled(), log_proto_level_end(), log_proto_level_end_array(), log_proto_level_start(), log_proto_level_start_array(), and LogUnboxed()\&.
.SS "static void log_version_info (void)\fC [static]\fP"

.PP
Definition at line 133 of file kinetic_logger\&.c\&.
.PP
References KINETIC_C_PROTOCOL_VERSION, KINETIC_C_REPO_HASH, KINETIC_C_VERSION, and KineticLogger_LogPrintf()\&.
.SS "void KineticLogger_Init (const char *log_file, intlog_level)"

.PP
Definition at line 56 of file kinetic_logger\&.c\&.
.PP
References BufferMutex, KINETIC_ASSERT, KineticLoggerHandle, KineticLogLevel, and log_version_info()\&.
.SS "void KineticLogger_Close (void)"

.PP
Definition at line 86 of file kinetic_logger\&.c\&.
.PP
References KineticLoggerHandle, and KineticLogLevel\&.
.SS "void KineticLogger_Log (intlog_level, const char *message)"

.PP
Definition at line 96 of file kinetic_logger\&.c\&.
.PP
References KineticLogger_LogPrintf()\&.
.SS "void KineticLogger_LogPrintf (intlog_level, const char *format, \&.\&.\&.)"

.PP
Definition at line 101 of file kinetic_logger\&.c\&.
.PP
References Buffer, BUFFER_MAX_STRLEN, finish_buffer(), get_buffer(), is_level_enabled(), and KineticLoggerHandle\&.
.SS "void KineticLogger_LogLocation (const char *filename, intline, const char *message)"

.PP
Definition at line 139 of file kinetic_logger\&.c\&.
.PP
References KineticLogger_LogPrintf(), and KineticLogLevel\&.
.SS "void KineticLogger_LogHeader (intlog_level, const \fBKineticPDUHeader\fP *header)"

.PP
Definition at line 154 of file kinetic_logger\&.c\&.
.PP
References is_level_enabled(), KineticLogger_Log(), and KineticLogger_LogPrintf()\&.
.SS "static void log_proto_level_start (const char *name)\fC [static]\fP"

.PP
Definition at line 174 of file kinetic_logger\&.c\&.
.PP
References indent, indent_overflow, KineticLogger_LogPrintf(), LOG_INDENT, and max_indent\&.
.SS "static void log_proto_level_end (void)\fC [static]\fP"

.PP
Definition at line 185 of file kinetic_logger\&.c\&.
.PP
References indent, indent_overflow, and KineticLogger_LogPrintf()\&.
.SS "static void log_proto_level_start_array (const char *name, unsignedquantity)\fC [static]\fP"

.PP
Definition at line 196 of file kinetic_logger\&.c\&.
.PP
References indent, indent_overflow, KineticLogger_LogPrintf(), LOG_INDENT, and max_indent\&.
.SS "static void log_proto_level_end_array (void)\fC [static]\fP"

.PP
Definition at line 208 of file kinetic_logger\&.c\&.
.PP
References indent, indent_overflow, and KineticLogger_LogPrintf()\&.
.SS "static int bytetoa (char *p_buf, uint8_tval)\fC [static]\fP"

.PP
Definition at line 219 of file kinetic_logger\&.c\&.
.SS "int KineticLogger_ByteArraySliceToCString (char *p_buf, const \fBByteArray\fPbytes, const intstart, const intcount)"

.PP
Definition at line 239 of file kinetic_logger\&.c\&.
.PP
References bytetoa(), and ByteArray::data\&.
.SS "static void LogUnboxed (intlog_level, void const *constfieldData, ProtobufCFieldDescriptor const *constfieldDesc, size_t consti, char *log_indent)\fC [static]\fP"

.PP
Definition at line 253 of file kinetic_logger\&.c\&.
.PP
References BOOL_TO_STRING, KINETIC_ASSERT, KineticLogger_LogByteArray(), KineticLogger_LogPrintf(), log_proto_level_end(), log_proto_level_start(), and log_protobuf_message()\&.
.SS "void KineticLogger_LogProtobuf (intlog_level, const Com__Seagate__Kinetic__Proto__Message *msg)"

.PP
Definition at line 423 of file kinetic_logger\&.c\&.
.PP
References indent, indent_overflow, is_level_enabled(), KineticLogger_Log(), and log_protobuf_message()\&.
.SS "void KineticLogger_LogStatus (intlog_level, Com__Seagate__Kinetic__Proto__Command__Status *status)"

.PP
Definition at line 435 of file kinetic_logger\&.c\&.
.PP
References COM__SEAGATE__KINETIC__PROTO__COMMAND__STATUS__STATUS_CODE__INVALID_STATUS_CODE, COM__SEAGATE__KINETIC__PROTO__COMMAND__STATUS__STATUS_CODE__SUCCESS, is_level_enabled(), and KineticLogger_LogPrintf()\&.
.SS "void KineticLogger_LogByteArray (intlog_level, const char *title, \fBByteArray\fPbytes)"

.PP
Definition at line 492 of file kinetic_logger\&.c\&.
.PP
References ByteArray::data, is_level_enabled(), KineticLogger_LogPrintf(), and ByteArray::len\&.
.SS "void KineticLogger_LogByteBuffer (intlog_level, const char *title, \fBByteBuffer\fPbuffer)"

.PP
Definition at line 536 of file kinetic_logger\&.c\&.
.PP
References ByteBuffer::array, ByteBuffer::bytesUsed, ByteArray::data, is_level_enabled(), and KineticLogger_LogByteArray()\&.
.SH "Variable Documentation"
.PP 
.SS "int KineticLogLevel = -1\fC [static]\fP"

.PP
Definition at line 36 of file kinetic_logger\&.c\&.
.SS "FILE* KineticLoggerHandle = NULL\fC [static]\fP"

.PP
Definition at line 37 of file kinetic_logger\&.c\&.
.SS "pthread_mutex_t BufferMutex = PTHREAD_MUTEX_INITIALIZER\fC [static]\fP"

.PP
Definition at line 38 of file kinetic_logger\&.c\&.
.SS "char Buffer[1024]\fC [static]\fP"

.PP
Definition at line 39 of file kinetic_logger\&.c\&.
.SS "char indent[64] = ' '\fC [static]\fP"

.PP
Definition at line 169 of file kinetic_logger\&.c\&.
.SS "const size_t max_indent = sizeof(\fBindent\fP)-3\fC [static]\fP"

.PP
Definition at line 170 of file kinetic_logger\&.c\&.
.SS "int indent_overflow = 0\fC [static]\fP"

.PP
Definition at line 171 of file kinetic_logger\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for kinetic-c from the source code\&.
