.TH "kinetic_client.h" 3 "Wed Oct 15 2014" "Version v0.7.0" "protobuf-c" \" -*- nroff -*-
.ad l
.nh
.SH NAME
kinetic_client.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'kinetic_types\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBKineticClient_Init\fP (const char *logFile)"
.br
.RI "\fIInitializes the Kinetic API andcsonfigures logging destination\&. \fP"
.ti -1c
.RI "\fBKineticStatus\fP \fBKineticClient_Connect\fP (const \fBKineticSession\fP *config, \fBKineticSessionHandle\fP *handle)"
.br
.RI "\fIInitializes the Kinetic API, configures logging destination, establishes a connection to the specified Kinetic Device, and establishes a session\&. \fP"
.ti -1c
.RI "\fBKineticStatus\fP \fBKineticClient_Disconnect\fP (\fBKineticSessionHandle\fP *const handle)"
.br
.RI "\fICloses the connection to a host\&. \fP"
.ti -1c
.RI "\fBKineticStatus\fP \fBKineticClient_NoOp\fP (\fBKineticSessionHandle\fP handle)"
.br
.RI "\fIExecutes a NOOP command to test whether the Kinetic Device is operational\&. \fP"
.ti -1c
.RI "\fBKineticStatus\fP \fBKineticClient_Put\fP (\fBKineticSessionHandle\fP handle, \fBKineticEntry\fP *const metadata)"
.br
.RI "\fIExecutes a PUT command to store/update an entry on the Kinetic Device\&. \fP"
.ti -1c
.RI "\fBKineticStatus\fP \fBKineticClient_Get\fP (\fBKineticSessionHandle\fP handle, \fBKineticEntry\fP *const metadata)"
.br
.RI "\fIExecutes a GET command to retrieve and entry from the Kinetic Device\&. \fP"
.ti -1c
.RI "\fBKineticStatus\fP \fBKineticClient_Delete\fP (\fBKineticSessionHandle\fP handle, \fBKineticEntry\fP *const metadata)"
.br
.RI "\fIExecutes a DELETE command to delete an entry from the Kinetic Device\&. \fP"
.ti -1c
.RI "\fBKineticStatus\fP \fBKineticClient_GetKeyRange\fP (\fBKineticSessionHandle\fP handle, \fBKineticKeyRange\fP *range, \fBByteBuffer\fP *keys[], int max_keys)"
.br
.RI "\fIExecutes a GETKEYRANGE command to retrive a set of keys in the range specified range from the Kinetic Device\&. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "void KineticClient_Init (const char *logFile)"

.PP
Initializes the Kinetic API andcsonfigures logging destination\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlogFile\fP Path to log file\&. Specify NULL to log to STDOUT\&. 
.RE
.PP

.PP
Definition at line 84 of file kinetic_client\&.c\&.
.PP
References KineticLogger_Init()\&.
.SS "\fBKineticStatus\fP KineticClient_Connect (const \fBKineticSession\fP *config, \fBKineticSessionHandle\fP *handle)"

.PP
Initializes the Kinetic API, configures logging destination, establishes a connection to the specified Kinetic Device, and establishes a session\&. 
.PP
\fBParameters:\fP
.RS 4
\fIconfig\fP Session configuration \&.host Host name or IP address to connect to \&.port Port to establish socket connection on \&.nonBlocking Set to true for non-blocking or false for blocking I/O \&.clusterVersion Cluster version to use for the session \&.identity Identity to use for the session \&.hmacKey Key to use for HMAC calculations (NULL-terminated string) 
.br
\fIhandle\fP Pointer to KineticSessionHandle (populated upon successful connection)
.RE
.PP
\fBReturns:\fP
.RS 4
Returns the resulting KineticStatus 
.RE
.PP

.PP
Definition at line 89 of file kinetic_client\&.c\&.
.PP
References ByteArray::data, KineticSession::hmacKey, KineticSession::host, KINETIC_HANDLE_INVALID, KINETIC_STATUS_CONNECTION_ERROR, KINETIC_STATUS_HMAC_EMPTY, KINETIC_STATUS_HOST_EMPTY, KINETIC_STATUS_SESSION_EMPTY, KINETIC_STATUS_SESSION_INVALID, KINETIC_STATUS_SUCCESS, KineticConnection_Connect(), KineticConnection_FreeConnection(), KineticConnection_FromHandle(), KineticConnection_NewConnection(), ByteArray::len, LOG, LOGF, and KineticSession::port\&.
.SS "\fBKineticStatus\fP KineticClient_Disconnect (\fBKineticSessionHandle\fP *consthandle)"

.PP
Closes the connection to a host\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP KineticSessionHandle for a connected session\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Returns the resulting KineticStatus 
.RE
.PP

.PP
Definition at line 136 of file kinetic_client\&.c\&.
.PP
References KINETIC_HANDLE_INVALID, KINETIC_STATUS_CONNECTION_ERROR, KINETIC_STATUS_SESSION_INVALID, KINETIC_STATUS_SUCCESS, KineticConnection_Disconnect(), KineticConnection_FreeConnection(), KineticConnection_FromHandle(), and LOG\&.
.SS "\fBKineticStatus\fP KineticClient_NoOp (\fBKineticSessionHandle\fPhandle)"

.PP
Executes a NOOP command to test whether the Kinetic Device is operational\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP KineticSessionHandle for a connected session\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Returns the resulting KineticStatus 
.RE
.PP

.PP
Definition at line 160 of file kinetic_client\&.c\&.
.PP
References KINETIC_STATUS_SUCCESS, KineticOperation_BuildNoop(), and KineticOperation_Free()\&.
.SS "\fBKineticStatus\fP KineticClient_Put (\fBKineticSessionHandle\fPhandle, \fBKineticEntry\fP *constmetadata)"

.PP
Executes a PUT command to store/update an entry on the Kinetic Device\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP KineticSessionHandle for a connected session\&. 
.br
\fImetadata\fP Key/value metadata for object to store\&. 'value' must specify the data to be stored\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Returns the resulting KineticStatus 
.RE
.PP

.PP
Definition at line 181 of file kinetic_client\&.c\&.
.PP
References ByteBuffer::array, BYTE_BUFFER_NONE, ByteArray::data, KineticEntry::dbVersion, KINETIC_STATUS_SUCCESS, KineticOperation_BuildPut(), KineticOperation_Free(), ByteArray::len, and KineticEntry::newVersion\&.
.SS "\fBKineticStatus\fP KineticClient_Get (\fBKineticSessionHandle\fPhandle, \fBKineticEntry\fP *constmetadata)"

.PP
Executes a GET command to retrieve and entry from the Kinetic Device\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP KineticSessionHandle for a connected session\&. 
.br
\fImetadata\fP Key/value metadata for object to retrieve\&. 'value' will be populated unless 'metadataOnly' is set to 'true'
.RE
.PP
\fBReturns:\fP
.RS 4
Returns the resulting KineticStatus 
.RE
.PP

.PP
Definition at line 211 of file kinetic_client\&.c\&.
.PP
References ByteBuffer::array, Copy_KineticProto_KeyValue_to_KineticEntry(), ByteArray::data, KINETIC_STATUS_BUFFER_OVERRUN, KINETIC_STATUS_SUCCESS, KineticOperation_BuildGet(), KineticOperation_Free(), KineticPDU_GetKeyValue(), KineticEntry::metadataOnly, KineticOperation::response, and KineticEntry::value\&.
.SS "\fBKineticStatus\fP KineticClient_Delete (\fBKineticSessionHandle\fPhandle, \fBKineticEntry\fP *constmetadata)"

.PP
Executes a DELETE command to delete an entry from the Kinetic Device\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP KineticSessionHandle for a connected session\&. 
.br
\fImetadata\fP Key/value metadata for object to delete\&. 'value' is not used for this operation\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Returns the resulting KineticStatus 
.RE
.PP

.PP
Definition at line 250 of file kinetic_client\&.c\&.
.PP
References KINETIC_STATUS_SUCCESS, KineticOperation_BuildDelete(), and KineticOperation_Free()\&.
.SS "\fBKineticStatus\fP KineticClient_GetKeyRange (\fBKineticSessionHandle\fPhandle, \fBKineticKeyRange\fP *range, \fBByteBuffer\fP *keys[], intmax_keys)"

.PP
Executes a GETKEYRANGE command to retrive a set of keys in the range specified range from the Kinetic Device\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP KineticSessionHandle for a connected session\&. 
.br
\fIrange\fP \fBKineticKeyRange\fP specifying keys to return 
.br
\fIkeys\fP An pointer to an array of ByteBuffers with pre-allocated arrays to store the retrieved keys 
.br
\fImax_keys\fP The number maximum number of keys to request from the device\&. There must be at least this many ByteBuffers in the \fCkeys\fP array for population\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Returns 0 upon succes, -1 or the Kinetic status code upon failure 
.RE
.PP

.PP
Definition at line 316 of file kinetic_client\&.c\&.
.PP
References KINETIC_STATUS_SUCCESS\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for protobuf-c from the source code\&.
