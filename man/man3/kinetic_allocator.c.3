.TH "kinetic_allocator.c" 3 "Thu Dec 11 2014" "Version v0.9.1" "kinetic-c" \" -*- nroff -*-
.ad l
.nh
.SH NAME
kinetic_allocator.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'kinetic_allocator\&.h'\fP
.br
\fC#include 'kinetic_logger\&.h'\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <pthread\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBKINETIC_LIST_LOCK\fP(_list)"
.br
.ti -1c
.RI "#define \fBKINETIC_LIST_UNLOCK\fP(_list)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBKineticAllocator_InitLists\fP (KineticConnection *connection)"
.br
.ti -1c
.RI "KineticConnection * \fBKineticAllocator_NewConnection\fP (void)"
.br
.ti -1c
.RI "void \fBKineticAllocator_FreeConnection\fP (KineticConnection *connection)"
.br
.ti -1c
.RI "KineticPDU * \fBKineticAllocator_NewPDU\fP (KineticConnection *connection)"
.br
.ti -1c
.RI "void \fBKineticAllocator_FreePDU\fP (KineticConnection *connection, KineticPDU *pdu)"
.br
.ti -1c
.RI "KineticPDU * \fBKineticAllocator_GetFirstPDU\fP (KineticConnection *connection)"
.br
.ti -1c
.RI "KineticPDU * \fBKineticAllocator_GetNextPDU\fP (KineticConnection *connection, KineticPDU *pdu)"
.br
.ti -1c
.RI "void \fBKineticAllocator_FreeAllPDUs\fP (KineticConnection *connection)"
.br
.ti -1c
.RI "KineticOperation * \fBKineticAllocator_NewOperation\fP (KineticConnection *const connection)"
.br
.ti -1c
.RI "void \fBKineticAllocator_FreeOperation\fP (KineticConnection *const connection, KineticOperation *operation)"
.br
.ti -1c
.RI "KineticOperation * \fBKineticAllocator_GetFirstOperation\fP (KineticConnection *const connection)"
.br
.ti -1c
.RI "KineticOperation * \fBKineticAllocator_GetNextOperation\fP (KineticConnection *const connection, KineticOperation *operation)"
.br
.ti -1c
.RI "void \fBKineticAllocator_FreeAllOperations\fP (KineticConnection *const connection)"
.br
.ti -1c
.RI "bool \fBKineticAllocator_ValidateAllMemoryFreed\fP (KineticConnection *const connection)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define KINETIC_LIST_LOCK(_list)"
\fBValue:\fP
.PP
.nf
{ \
    /*LOG_LOCATION; LOGF3("Locking list! (list_addr=0x%llX)", (_list));*/ \
    pthread_mutex_lock(&((_list)->mutex)); \
    ((_list)->locked) = true; \
}
.fi
.PP
Definition at line 31 of file kinetic_allocator\&.c\&.
.SS "#define KINETIC_LIST_UNLOCK(_list)"
\fBValue:\fP
.PP
.nf
{ \
    /*LOG_LOCATION; LOGF3("Unlocking list! (list_addr=0x%llX)", (_list));*/ \
    assert(((_list)->locked)); \
    pthread_mutex_unlock(&((_list)->mutex)); \
    ((_list)->locked) = false; \
}
.fi
.PP
Definition at line 37 of file kinetic_allocator\&.c\&.
.SH "Function Documentation"
.PP 
.SS "void KineticAllocator_InitLists (KineticConnection *connection)"

.PP
Definition at line 44 of file kinetic_allocator\&.c\&.
.PP
References KINETIC_LIST_INITIALIZER\&.
.SS "KineticConnection* KineticAllocator_NewConnection (void)"

.PP
Definition at line 51 of file kinetic_allocator\&.c\&.
.PP
References KINETIC_CONNECTION_INIT\&.
.SS "void KineticAllocator_FreeConnection (KineticConnection *connection)"

.PP
Definition at line 58 of file kinetic_allocator\&.c\&.
.SS "KineticPDU* KineticAllocator_NewPDU (KineticConnection *connection)"

.PP
Definition at line 200 of file kinetic_allocator\&.c\&.
.PP
References KINETIC_PDU_INIT, LOG0, and LOGF3\&.
.SS "void KineticAllocator_FreePDU (KineticConnection *connection, KineticPDU *pdu)"

.PP
Definition at line 216 of file kinetic_allocator\&.c\&.
.PP
References KINETIC_LIST_LOCK, KINETIC_LIST_UNLOCK, KineticProto_Message__free_unpacked(), LOG3, and LOGF3\&.
.SS "KineticPDU* KineticAllocator_GetFirstPDU (KineticConnection *connection)"

.PP
Definition at line 236 of file kinetic_allocator\&.c\&.
.SS "KineticPDU* KineticAllocator_GetNextPDU (KineticConnection *connection, KineticPDU *pdu)"

.PP
Definition at line 242 of file kinetic_allocator\&.c\&.
.SS "void KineticAllocator_FreeAllPDUs (KineticConnection *connection)"

.PP
Definition at line 248 of file kinetic_allocator\&.c\&.
.PP
References KINETIC_LIST_LOCK, KINETIC_LIST_UNLOCK, KineticProto_Message__free_unpacked(), LOG1, and LOG3\&.
.SS "KineticOperation* KineticAllocator_NewOperation (KineticConnection *constconnection)"

.PP
Definition at line 276 of file kinetic_allocator\&.c\&.
.PP
References KINETIC_OPERATION_INIT, KINETIC_PDU_INIT_WITH_COMMAND, KineticAllocator_NewPDU(), LOGF0, and LOGF3\&.
.SS "void KineticAllocator_FreeOperation (KineticConnection *constconnection, KineticOperation *operation)"

.PP
Definition at line 293 of file kinetic_allocator\&.c\&.
.PP
References KineticAllocator_FreePDU(), and LOGF3\&.
.SS "KineticOperation* KineticAllocator_GetFirstOperation (KineticConnection *constconnection)"

.PP
Definition at line 315 of file kinetic_allocator\&.c\&.
.SS "KineticOperation* KineticAllocator_GetNextOperation (KineticConnection *constconnection, KineticOperation *operation)"

.PP
Definition at line 321 of file kinetic_allocator\&.c\&.
.SS "void KineticAllocator_FreeAllOperations (KineticConnection *constconnection)"

.PP
Definition at line 327 of file kinetic_allocator\&.c\&.
.PP
References KineticAllocator_FreeOperation(), and KineticAllocator_GetFirstOperation()\&.
.SS "bool KineticAllocator_ValidateAllMemoryFreed (KineticConnection *constconnection)"

.PP
Definition at line 336 of file kinetic_allocator\&.c\&.
.PP
References BOOL_TO_STRING, and LOGF3\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for kinetic-c from the source code\&.
