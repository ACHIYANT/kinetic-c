.TH "byte_array.h" 3 "Thu Nov 13 2014" "Version v0.8.1-beta" "kinetic-c" \" -*- nroff -*-
.ad l
.nh
.SH NAME
byte_array.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdint\&.h>\fP
.br
\fC#include <stdbool\&.h>\fP
.br
\fC#include <stddef\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBByteArray\fP"
.br
.RI "\fIStructure for handling generic arrays of bytes\&. \fP"
.ti -1c
.RI "struct \fBByteBuffer\fP"
.br
.RI "\fIStructure for an embedded \fBByteArray\fP as a buffer\&. \fP"
.ti -1c
.RI "struct \fBByteBufferArray\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBBYTE_ARRAY_NONE\fP   (\fBByteArray\fP){\&.len = 0, \&.data = NULL}"
.br
.RI "\fIConvenience macro to represent an empty array with no data\&. \fP"
.ti -1c
.RI "#define \fBBYTE_BUFFER_NONE\fP   (\fBByteBuffer\fP){\&.array = \fBBYTE_ARRAY_NONE\fP, \&.bytesUsed = 0}"
.br
.RI "\fIConvenience macro to represent an empty buffer with no data\&. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBByteArray\fP \fBByteArray_Create\fP (void *data, size_t len)"
.br
.ti -1c
.RI "\fBByteArray\fP \fBByteArray_CreateWithCString\fP (const char *str)"
.br
.ti -1c
.RI "\fBByteArray\fP \fBByteArray_GetSlice\fP (const \fBByteArray\fP array, size_t start, size_t len)"
.br
.ti -1c
.RI "void \fBByteArray_FillWithDummyData\fP (const \fBByteArray\fP array)"
.br
.ti -1c
.RI "\fBByteBuffer\fP \fBByteBuffer_Create\fP (void *data, size_t max_len, size_t used)"
.br
.ti -1c
.RI "\fBByteBuffer\fP \fBByteBuffer_CreateWithArray\fP (\fBByteArray\fP array)"
.br
.ti -1c
.RI "void \fBByteBuffer_Reset\fP (\fBByteBuffer\fP *buffer)"
.br
.ti -1c
.RI "long \fBByteBuffer_BytesRemaining\fP (const \fBByteBuffer\fP buffer)"
.br
.ti -1c
.RI "\fBByteArray\fP \fBByteBuffer_Consume\fP (\fBByteBuffer\fP *buffer, size_t len)"
.br
.ti -1c
.RI "\fBByteBuffer\fP * \fBByteBuffer_Append\fP (\fBByteBuffer\fP *buffer, const void *data, size_t len)"
.br
.ti -1c
.RI "\fBByteBuffer\fP * \fBByteBuffer_AppendArray\fP (\fBByteBuffer\fP *buffer, const \fBByteArray\fP array)"
.br
.ti -1c
.RI "\fBByteBuffer\fP * \fBByteBuffer_AppendCString\fP (\fBByteBuffer\fP *buffer, const char *data)"
.br
.ti -1c
.RI "\fBByteBuffer\fP * \fBByteBuffer_AppendDummyData\fP (\fBByteBuffer\fP *buffer, size_t len)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define BYTE_ARRAY_NONE   (\fBByteArray\fP){\&.len = 0, \&.data = NULL}"

.PP
Convenience macro to represent an empty array with no data\&. 
.PP
Definition at line 21 of file byte_array\&.h\&.
.SS "#define BYTE_BUFFER_NONE   (\fBByteBuffer\fP){\&.array = \fBBYTE_ARRAY_NONE\fP, \&.bytesUsed = 0}"

.PP
Convenience macro to represent an empty buffer with no data\&. 
.PP
Definition at line 45 of file byte_array\&.h\&.
.SH "Function Documentation"
.PP 
.SS "\fBByteArray\fP ByteArray_Create (void *data, size_tlen)"

.PP
Definition at line 6 of file byte_array\&.c\&.
.PP
References ByteArray::data\&.
.SS "\fBByteArray\fP ByteArray_CreateWithCString (const char *str)"

.PP
Definition at line 13 of file byte_array\&.c\&.
.PP
References ByteArray::data\&.
.SS "\fBByteArray\fP ByteArray_GetSlice (const \fBByteArray\fParray, size_tstart, size_tlen)"

.PP
Definition at line 27 of file byte_array\&.c\&.
.PP
References ByteArray::data, and ByteArray::len\&.
.SS "void ByteArray_FillWithDummyData (const \fBByteArray\fParray)"

.PP
Definition at line 20 of file byte_array\&.c\&.
.PP
References ByteArray::data, and ByteArray::len\&.
.SS "\fBByteBuffer\fP ByteBuffer_Create (void *data, size_tmax_len, size_tused)"

.PP
Definition at line 43 of file byte_array\&.c\&.
.PP
References ByteBuffer::array, and ByteArray::data\&.
.SS "\fBByteBuffer\fP ByteBuffer_CreateWithArray (\fBByteArray\fParray)"

.PP
Definition at line 51 of file byte_array\&.c\&.
.PP
References ByteBuffer::array\&.
.SS "void ByteBuffer_Reset (\fBByteBuffer\fP *buffer)"

.PP
Definition at line 37 of file byte_array\&.c\&.
.PP
References ByteBuffer::bytesUsed\&.
.SS "long ByteBuffer_BytesRemaining (const \fBByteBuffer\fPbuffer)"

.PP
Definition at line 56 of file byte_array\&.c\&.
.PP
References ByteBuffer::array, ByteBuffer::bytesUsed, ByteArray::data, and ByteArray::len\&.
.SS "\fBByteArray\fP ByteBuffer_Consume (\fBByteBuffer\fP *buffer, size_tlen)"

.PP
Definition at line 62 of file byte_array\&.c\&.
.PP
References ByteBuffer::array, BYTE_ARRAY_NONE, ByteBuffer::bytesUsed, ByteArray::data, and ByteArray::len\&.
.SS "\fBByteBuffer\fP* ByteBuffer_Append (\fBByteBuffer\fP *buffer, const void *data, size_tlen)"

.PP
Definition at line 77 of file byte_array\&.c\&.
.PP
References ByteBuffer::array, ByteBuffer::bytesUsed, ByteArray::data, and ByteArray::len\&.
.SS "\fBByteBuffer\fP* ByteBuffer_AppendArray (\fBByteBuffer\fP *buffer, const \fBByteArray\fParray)"

.PP
Definition at line 93 of file byte_array\&.c\&.
.PP
References ByteBuffer::array, ByteBuffer::bytesUsed, ByteArray::data, and ByteArray::len\&.
.SS "\fBByteBuffer\fP* ByteBuffer_AppendCString (\fBByteBuffer\fP *buffer, const char *data)"

.PP
Definition at line 106 of file byte_array\&.c\&.
.PP
References ByteBuffer::array, ByteBuffer::bytesUsed, ByteArray::data, and ByteArray::len\&.
.SS "\fBByteBuffer\fP* ByteBuffer_AppendDummyData (\fBByteBuffer\fP *buffer, size_tlen)"

.PP
Definition at line 120 of file byte_array\&.c\&.
.PP
References ByteBuffer::array, ByteBuffer::bytesUsed, ByteArray::data, and ByteArray::len\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for kinetic-c from the source code\&.
