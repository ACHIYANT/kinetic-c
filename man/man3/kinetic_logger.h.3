.TH "kinetic_logger.h" 3 "Thu Dec 11 2014" "Version v0.9.1" "kinetic-c" \" -*- nroff -*-
.ad l
.nh
.SH NAME
kinetic_logger.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'kinetic_types_internal\&.h'\fP
.br
\fC#include 'kinetic_proto\&.h'\fP
.br
\fC#include <stdarg\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBKINETIC_LOGGER_DISABLED\fP   false"
.br
.ti -1c
.RI "#define \fBKINETIC_LOGGER_FLUSH_THREAD_ENABLED\fP   false"
.br
.ti -1c
.RI "#define \fBKINETIC_LOG_FILE\fP   'kinetic\&.log'"
.br
.ti -1c
.RI "#define \fBBYTES_TO_CSTRING\fP(_buf_start, _array, _array_start, _count)"
.br
.ti -1c
.RI "#define \fBLOG0\fP(message)   \fBKineticLogger_Log\fP(0, message)"
.br
.ti -1c
.RI "#define \fBLOG1\fP(message)   \fBKineticLogger_Log\fP(1, message)"
.br
.ti -1c
.RI "#define \fBLOG2\fP(message)   \fBKineticLogger_Log\fP(2, message)"
.br
.ti -1c
.RI "#define \fBLOG3\fP(message)   \fBKineticLogger_Log\fP(3, message)"
.br
.ti -1c
.RI "#define \fBLOGF0\fP(message,\&.\&.\&.)   \fBKineticLogger_LogPrintf\fP(0, message, __VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBLOGF1\fP(message,\&.\&.\&.)   \fBKineticLogger_LogPrintf\fP(1, message, __VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBLOGF2\fP(message,\&.\&.\&.)   \fBKineticLogger_LogPrintf\fP(2, message, __VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBLOGF3\fP(message,\&.\&.\&.)   \fBKineticLogger_LogPrintf\fP(3, message, __VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBLOG_LOCATION\fP   \fBKineticLogger_LogLocation\fP(__FILE__, __LINE__, \fB__func__\fP);"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBKineticLogger_Init\fP (const char *logFile, int log_level)"
.br
.ti -1c
.RI "void \fBKineticLogger_Close\fP (void)"
.br
.ti -1c
.RI "void \fBKineticLogger_Log\fP (int log_level, const char *message)"
.br
.ti -1c
.RI "void \fBKineticLogger_LogPrintf\fP (int log_level, const char *format,\&.\&.\&.)"
.br
.ti -1c
.RI "void \fBKineticLogger_LogLocation\fP (const char *filename, int line, char const *message)"
.br
.ti -1c
.RI "void \fBKineticLogger_LogHeader\fP (int log_level, const \fBKineticPDUHeader\fP *header)"
.br
.ti -1c
.RI "void \fBKineticLogger_LogProtobuf\fP (int log_level, const KineticProto_Message *msg)"
.br
.ti -1c
.RI "void \fBKineticLogger_LogStatus\fP (int log_level, KineticProto_Command_Status *status)"
.br
.ti -1c
.RI "void \fBKineticLogger_LogByteArray\fP (int log_level, const char *title, \fBByteArray\fP bytes)"
.br
.ti -1c
.RI "void \fBKineticLogger_LogByteBuffer\fP (int log_level, const char *title, \fBByteBuffer\fP buffer)"
.br
.ti -1c
.RI "int \fBKineticLogger_ByteArraySliceToCString\fP (char *p_buf, const \fBByteArray\fP bytes, const int start, const int count)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define KINETIC_LOGGER_DISABLED   false"

.PP
Definition at line 28 of file kinetic_logger\&.h\&.
.SS "#define KINETIC_LOGGER_FLUSH_THREAD_ENABLED   false"

.PP
Definition at line 29 of file kinetic_logger\&.h\&.
.SS "#define KINETIC_LOG_FILE   'kinetic\&.log'"

.PP
Definition at line 30 of file kinetic_logger\&.h\&.
.SS "#define BYTES_TO_CSTRING(_buf_start, _array, _array_start, _count)"
\fBValue:\fP
.PP
.nf
{ \
    ByteArray __array = {\&.data = _array\&.data, \&.len = (_array)\&.len}; \\
    KineticLogger_ByteArraySliceToCString((char*)(_buf_start), (__array), (_array_start), (_count)); \
}
.fi
.PP
Definition at line 44 of file kinetic_logger\&.h\&.
.SS "#define LOG0(message)   \fBKineticLogger_Log\fP(0, message)"

.PP
Definition at line 52 of file kinetic_logger\&.h\&.
.SS "#define LOG1(message)   \fBKineticLogger_Log\fP(1, message)"

.PP
Definition at line 53 of file kinetic_logger\&.h\&.
.SS "#define LOG2(message)   \fBKineticLogger_Log\fP(2, message)"

.PP
Definition at line 54 of file kinetic_logger\&.h\&.
.SS "#define LOG3(message)   \fBKineticLogger_Log\fP(3, message)"

.PP
Definition at line 55 of file kinetic_logger\&.h\&.
.SS "#define LOGF0(message, \&.\&.\&.)   \fBKineticLogger_LogPrintf\fP(0, message, __VA_ARGS__)"

.PP
Definition at line 56 of file kinetic_logger\&.h\&.
.SS "#define LOGF1(message, \&.\&.\&.)   \fBKineticLogger_LogPrintf\fP(1, message, __VA_ARGS__)"

.PP
Definition at line 57 of file kinetic_logger\&.h\&.
.SS "#define LOGF2(message, \&.\&.\&.)   \fBKineticLogger_LogPrintf\fP(2, message, __VA_ARGS__)"

.PP
Definition at line 58 of file kinetic_logger\&.h\&.
.SS "#define LOGF3(message, \&.\&.\&.)   \fBKineticLogger_LogPrintf\fP(3, message, __VA_ARGS__)"

.PP
Definition at line 59 of file kinetic_logger\&.h\&.
.SS "#define LOG_LOCATION   \fBKineticLogger_LogLocation\fP(__FILE__, __LINE__, \fB__func__\fP);"

.PP
Definition at line 60 of file kinetic_logger\&.h\&.
.SH "Function Documentation"
.PP 
.SS "void KineticLogger_Init (const char *logFile, intlog_level)"

.PP
Definition at line 71 of file kinetic_logger\&.c\&.
.SS "void KineticLogger_Close (void)"

.PP
Definition at line 101 of file kinetic_logger\&.c\&.
.PP
References Kinetic_GetErrnoDescription(), and LOGF0\&.
.SS "void KineticLogger_Log (intlog_level, const char *message)"

.PP
Definition at line 121 of file kinetic_logger\&.c\&.
.PP
References KINETIC_LOGGER_BUFFER_STR_MAX_LEN\&.
.SS "void KineticLogger_LogPrintf (intlog_level, const char *format, \&.\&.\&.)"

.PP
Definition at line 133 of file kinetic_logger\&.c\&.
.PP
References KINETIC_LOGGER_BUFFER_STR_MAX_LEN\&.
.SS "void KineticLogger_LogLocation (const char *filename, intline, char const *message)"

.PP
Definition at line 151 of file kinetic_logger\&.c\&.
.PP
References KineticLogger_LogPrintf()\&.
.SS "void KineticLogger_LogHeader (intlog_level, const \fBKineticPDUHeader\fP *header)"

.PP
Definition at line 167 of file kinetic_logger\&.c\&.
.PP
References KineticLogger_Log(), and KineticLogger_LogPrintf()\&.
.SS "void KineticLogger_LogProtobuf (intlog_level, const KineticProto_Message *msg)"

.PP
Definition at line 410 of file kinetic_logger\&.c\&.
.PP
References KineticLogger_Log(), and LOG_PROTO_INIT\&.
.SS "void KineticLogger_LogStatus (intlog_level, KineticProto_Command_Status *status)"

.PP
Definition at line 422 of file kinetic_logger\&.c\&.
.PP
References KINETIC_PROTO_COMMAND_STATUS_STATUS_CODE_INVALID_STATUS_CODE, KINETIC_PROTO_COMMAND_STATUS_STATUS_CODE_SUCCESS, and KineticLogger_LogPrintf()\&.
.SS "void KineticLogger_LogByteArray (intlog_level, const char *title, \fBByteArray\fPbytes)"

.PP
Definition at line 479 of file kinetic_logger\&.c\&.
.PP
References ByteArray::data, KineticLogger_LogPrintf(), and ByteArray::len\&.
.SS "void KineticLogger_LogByteBuffer (intlog_level, const char *title, \fBByteBuffer\fPbuffer)"

.PP
Definition at line 523 of file kinetic_logger\&.c\&.
.PP
References ByteBuffer::array, ByteBuffer::bytesUsed, ByteArray::data, and KineticLogger_LogByteArray()\&.
.SS "int KineticLogger_ByteArraySliceToCString (char *p_buf, const \fBByteArray\fPbytes, const intstart, const intcount)"

.PP
Definition at line 218 of file kinetic_logger\&.c\&.
.PP
References ByteArray::data\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for kinetic-c from the source code\&.
