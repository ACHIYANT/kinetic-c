.TH "kinetic_operation.h" 3 "Thu Nov 13 2014" "Version v0.8.1-beta" "kinetic-c" \" -*- nroff -*-
.ad l
.nh
.SH NAME
kinetic_operation.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'kinetic_types_internal\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "\fBKineticStatus\fP \fBKineticOperation_SendRequest\fP (KineticOperation *const operation)"
.br
.ti -1c
.RI "KineticOperation * \fBKineticOperation_AssociateResponseWithOperation\fP (KineticPDU *response)"
.br
.ti -1c
.RI "struct timeval \fBKineticOperation_GetTimeoutTime\fP (KineticOperation *const operation)"
.br
.ti -1c
.RI "void \fBKineticOperation_SetTimeoutTime\fP (KineticOperation *const operation, uint32_t const timeout_in_sec)"
.br
.ti -1c
.RI "\fBKineticStatus\fP \fBKineticOperation_GetStatus\fP (const KineticOperation *const operation)"
.br
.ti -1c
.RI "\fBKineticStatus\fP \fBKineticOperation_NoopCallback\fP (KineticOperation *operation)"
.br
.ti -1c
.RI "void \fBKineticOperation_BuildNoop\fP (KineticOperation *operation)"
.br
.ti -1c
.RI "\fBKineticStatus\fP \fBKineticOperation_PutCallback\fP (KineticOperation *operation)"
.br
.ti -1c
.RI "void \fBKineticOperation_BuildPut\fP (KineticOperation *const operation, \fBKineticEntry\fP *const entry)"
.br
.ti -1c
.RI "\fBKineticStatus\fP \fBKineticOperation_GetCallback\fP (KineticOperation *operation)"
.br
.ti -1c
.RI "void \fBKineticOperation_BuildGet\fP (KineticOperation *const operation, \fBKineticEntry\fP *const entry)"
.br
.ti -1c
.RI "\fBKineticStatus\fP \fBKineticOperation_DeleteCallback\fP (KineticOperation *operation)"
.br
.ti -1c
.RI "void \fBKineticOperation_BuildDelete\fP (KineticOperation *const operation, \fBKineticEntry\fP *const entry)"
.br
.ti -1c
.RI "\fBKineticStatus\fP \fBKineticOperation_GetKeyRangeCallback\fP (KineticOperation *operation)"
.br
.ti -1c
.RI "void \fBKineticOperation_BuildGetKeyRange\fP (KineticOperation *const operation, \fBKineticKeyRange\fP *range, \fBByteBufferArray\fP *buffers)"
.br
.ti -1c
.RI "\fBKineticStatus\fP \fBKineticOperation_GetLogCallback\fP (KineticOperation *operation)"
.br
.ti -1c
.RI "void \fBKineticOperation_BuildGetLog\fP (KineticOperation *const operation, \fBKineticDeviceInfo_Type\fP type, \fBKineticDeviceInfo\fP **info)"
.br
.ti -1c
.RI "void \fBKineticOperation_Complete\fP (KineticOperation *operation, \fBKineticStatus\fP status)"
.br
.ti -1c
.RI "void \fBKineticOperation_TimeoutOperations\fP (KineticConnection *const connection)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "\fBKineticStatus\fP KineticOperation_SendRequest (KineticOperation *constoperation)"

.PP
Definition at line 70 of file kinetic_operation\&.c\&.
.PP
References KINETIC_PROTO_COMMAND_SECURITY_ACL_HMACALGORITHM_HmacSHA1, KineticHMAC_Init(), KineticHMAC_Populate(), KineticLogger_LogByteArray(), KineticLogger_LogHeader(), KineticNBO_FromHostU32(), KineticProto_command__get_packed_size(), KineticProto_command__pack(), KineticProto_Message__get_packed_size(), and LOGF1\&.
.SS "KineticOperation* KineticOperation_AssociateResponseWithOperation (KineticPDU *response)"

.PP
Definition at line 156 of file kinetic_operation\&.c\&.
.PP
References KINETIC_PDU_TYPE_REQUEST, KINETIC_PDU_TYPE_RESPONSE, KineticAllocator_GetFirstOperation(), KineticAllocator_GetNextOperation(), LOG0, LOG2, and LOGF2\&.
.SS "struct timeval KineticOperation_GetTimeoutTime (KineticOperation *constoperation)"

.PP
Definition at line 132 of file kinetic_operation\&.c\&.
.SS "void KineticOperation_SetTimeoutTime (KineticOperation *constoperation, uint32_t consttimeout_in_sec)"

.PP
Definition at line 140 of file kinetic_operation\&.c\&.
.PP
References Kinetic_TimevalAdd()\&.
.SS "\fBKineticStatus\fP KineticOperation_GetStatus (const KineticOperation *constoperation)"

.PP
Definition at line 123 of file kinetic_operation\&.c\&.
.PP
References KINETIC_STATUS_INVALID, and KineticPDU_GetStatus()\&.
.SS "\fBKineticStatus\fP KineticOperation_NoopCallback (KineticOperation *operation)"

.PP
Definition at line 194 of file kinetic_operation\&.c\&.
.PP
References KINETIC_STATUS_SUCCESS, and LOGF3\&.
.SS "void KineticOperation_BuildNoop (KineticOperation *operation)"

.PP
Definition at line 203 of file kinetic_operation\&.c\&.
.PP
References KINETIC_PROTO_COMMAND_MESSAGE_TYPE_NOOP, KineticConnection_IncrementSequence(), and KineticOperation_NoopCallback()\&.
.SS "\fBKineticStatus\fP KineticOperation_PutCallback (KineticOperation *operation)"

.PP
Definition at line 214 of file kinetic_operation\&.c\&.
.PP
References ByteBuffer::array, BYTE_BUFFER_NONE, ByteBuffer_Append(), ByteBuffer_Reset(), ByteBuffer::bytesUsed, ByteArray::data, KineticEntry::dbVersion, KINETIC_STATUS_SUCCESS, ByteArray::len, LOGF3, and KineticEntry::newVersion\&.
.SS "void KineticOperation_BuildPut (KineticOperation *constoperation, \fBKineticEntry\fP *constentry)"

.PP
Definition at line 243 of file kinetic_operation\&.c\&.
.PP
References KINETIC_PROTO_COMMAND_MESSAGE_TYPE_PUT, KineticConnection_IncrementSequence(), KineticMessage_ConfigureKeyValue(), and KineticOperation_PutCallback()\&.
.SS "\fBKineticStatus\fP KineticOperation_GetCallback (KineticOperation *operation)"

.PP
Definition at line 260 of file kinetic_operation\&.c\&.
.PP
References Copy_KineticProto_Command_KeyValue_to_KineticEntry(), KINETIC_STATUS_BUFFER_OVERRUN, KINETIC_STATUS_SUCCESS, KineticPDU_GetKeyValue(), and LOGF3\&.
.SS "void KineticOperation_BuildGet (KineticOperation *constoperation, \fBKineticEntry\fP *constentry)"

.PP
Definition at line 280 of file kinetic_operation\&.c\&.
.PP
References ByteBuffer_Reset(), KINETIC_PROTO_COMMAND_MESSAGE_TYPE_GET, KineticConnection_IncrementSequence(), KineticMessage_ConfigureKeyValue(), KineticOperation_GetCallback(), and KineticEntry::metadataOnly\&.
.SS "\fBKineticStatus\fP KineticOperation_DeleteCallback (KineticOperation *operation)"

.PP
Definition at line 301 of file kinetic_operation\&.c\&.
.PP
References KINETIC_STATUS_SUCCESS, and LOGF3\&.
.SS "void KineticOperation_BuildDelete (KineticOperation *constoperation, \fBKineticEntry\fP *constentry)"

.PP
Definition at line 312 of file kinetic_operation\&.c\&.
.PP
References ByteBuffer_Reset(), KINETIC_PROTO_COMMAND_MESSAGE_TYPE_DELETE, KineticConnection_IncrementSequence(), KineticMessage_ConfigureKeyValue(), and KineticOperation_DeleteCallback()\&.
.SS "\fBKineticStatus\fP KineticOperation_GetKeyRangeCallback (KineticOperation *operation)"

.PP
Definition at line 333 of file kinetic_operation\&.c\&.
.PP
References Copy_KineticProto_Command_Range_to_ByteBufferArray(), KINETIC_STATUS_BUFFER_OVERRUN, KINETIC_STATUS_SUCCESS, KineticPDU_GetKeyRange(), and LOGF3\&.
.SS "void KineticOperation_BuildGetKeyRange (KineticOperation *constoperation, \fBKineticKeyRange\fP *range, \fBByteBufferArray\fP *buffers)"

.PP
Definition at line 353 of file kinetic_operation\&.c\&.
.PP
References KINETIC_PROTO_COMMAND_MESSAGE_TYPE_GETKEYRANGE, KineticConnection_IncrementSequence(), KineticMessage_ConfigureKeyRange(), and KineticOperation_GetKeyRangeCallback()\&.
.SS "\fBKineticStatus\fP KineticOperation_GetLogCallback (KineticOperation *operation)"

.PP
Definition at line 372 of file kinetic_operation\&.c\&.
.PP
References KINETIC_STATUS_OPERATION_FAILED, KINETIC_STATUS_SUCCESS, KineticDeviceInfo_Create(), and LOGF3\&.
.SS "void KineticOperation_BuildGetLog (KineticOperation *constoperation, \fBKineticDeviceInfo_Type\fPtype, \fBKineticDeviceInfo\fP **info)"

.PP
Definition at line 392 of file kinetic_operation\&.c\&.
.PP
References KINETIC_PROTO_COMMAND_MESSAGE_TYPE_GETLOG, KineticConnection_IncrementSequence(), KineticDeviceInfo_Type_to_KineticProto_Command_GetLog_Type(), and KineticOperation_GetLogCallback()\&.
.SS "void KineticOperation_Complete (KineticOperation *operation, \fBKineticStatus\fPstatus)"

.PP
Definition at line 425 of file kinetic_operation\&.c\&.
.PP
References KineticAllocator_FreeOperation(), and KineticCompletionData::status\&.
.SS "void KineticOperation_TimeoutOperations (KineticConnection *constconnection)"

.PP
Definition at line 435 of file kinetic_operation\&.c\&.
.PP
References KINETIC_STATUS_OPERATION_TIMEDOUT, Kinetic_TimevalCmp(), Kinetic_TimevalIsZero(), KineticAllocator_GetFirstOperation(), KineticAllocator_GetNextOperation(), KineticOperation_Complete(), and KineticOperation_GetTimeoutTime()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for kinetic-c from the source code\&.
