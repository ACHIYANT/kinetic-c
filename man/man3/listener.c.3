.TH "listener.c" 3 "Fri Mar 13 2015" "Version v0.12.0" "kinetic-c" \" -*- nroff -*-
.ad l
.nh
.SH NAME
listener.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <unistd\&.h>\fP
.br
\fC#include <errno\&.h>\fP
.br
\fC#include <sys/time\&.h>\fP
.br
\fC#include <assert\&.h>\fP
.br
\fC#include <err\&.h>\fP
.br
\fC#include <time\&.h>\fP
.br
\fC#include 'bus_internal_types\&.h'\fP
.br
\fC#include 'listener\&.h'\fP
.br
\fC#include 'listener_helper\&.h'\fP
.br
\fC#include 'listener_cmd\&.h'\fP
.br
\fC#include 'listener_task\&.h'\fP
.br
\fC#include 'listener_internal\&.h'\fP
.br
\fC#include 'syscall\&.h'\fP
.br
\fC#include 'util\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "struct \fBlistener\fP * \fBListener_Init\fP (struct \fBbus\fP *b, struct \fBbus_config\fP *cfg)"
.br
.RI "\fIInitialize the listener\&. \fP"
.ti -1c
.RI "bool \fBListener_AddSocket\fP (struct \fBlistener\fP *l, \fBconnection_info\fP *ci, int *notify_fd)"
.br
.RI "\fIAdd/remove sockets' metadata from internal info\&. \fP"
.ti -1c
.RI "bool \fBListener_RemoveSocket\fP (struct \fBlistener\fP *l, int fd, int *notify_fd)"
.br
.ti -1c
.RI "bool \fBListener_HoldResponse\fP (struct \fBlistener\fP *l, int fd, int64_t seq_id, int16_t timeout_sec, int *notify_fd)"
.br
.RI "\fIThe client is about to start a write, the listener should hold on to the response (with timeout) if it arrives before receiving further instructions from the client\&. \fP"
.ti -1c
.RI "bool \fBListener_ExpectResponse\fP (struct \fBlistener\fP *l, \fBboxed_msg\fP *box, uint16_t *backpressure)"
.br
.RI "\fIThe client has finished a write, the listener should expect a response\&. \fP"
.ti -1c
.RI "bool \fBListener_Shutdown\fP (struct \fBlistener\fP *l, int *notify_fd)"
.br
.RI "\fIShut down the listener\&. \fP"
.ti -1c
.RI "void \fBListener_Free\fP (struct \fBlistener\fP *l)"
.br
.RI "\fIFree the listener, which must already be shut down\&. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "struct \fBlistener\fP* Listener_Init (struct \fBbus\fP *b, struct \fBbus_config\fP *cfg)"

.PP
Initialize the listener\&. 
.PP
Definition at line 39 of file listener\&.c\&.
.PP
References listener::bus, BUS_LOG, listener::commit_pipe, listener::fds, listener_msg::id, rx_info_t::id, listener::incoming_msg_pipe, INCOMING_MSG_PIPE_ID, LISTENER_NO_FD, LOG_LISTENER, MAX_PENDING_MESSAGES, MAX_QUEUE_MESSAGES, listener::msg_freelist, listener::msgs, listener_msg::next, rx_info_t::next, listener_msg::pipes, RIS_INACTIVE, listener::rx_info, listener::rx_info_freelist, listener::rx_info_max_used, listener::shutdown_notify_fd, rx_info_t::state, syscall_close(), and bus::udata\&.
.SS "bool Listener_AddSocket (struct \fBlistener\fP *l, \fBconnection_info\fP *ci, int *notify_fd)"

.PP
Add/remove sockets' metadata from internal info\&. Blocking\&. 
.PP
Definition at line 94 of file listener\&.c\&.
.PP
References listener_msg::add_socket, ListenerHelper_GetFreeMsg(), ListenerHelper_PushMessage(), MSG_ADD_SOCKET, listener_msg::pipes, listener_msg::type, and listener_msg::u\&.
.SS "bool Listener_RemoveSocket (struct \fBlistener\fP *l, intfd, int *notify_fd)"

.PP
Definition at line 105 of file listener\&.c\&.
.PP
References ListenerHelper_GetFreeMsg(), ListenerHelper_PushMessage(), MSG_REMOVE_SOCKET, listener_msg::pipes, listener_msg::remove_socket, listener_msg::type, and listener_msg::u\&.
.SS "bool Listener_HoldResponse (struct \fBlistener\fP *l, intfd, int64_tseq_id, int16_ttimeout_sec, int *notify_fd)"

.PP
The client is about to start a write, the listener should hold on to the response (with timeout) if it arrives before receiving further instructions from the client\&. 
.PP
Definition at line 115 of file listener\&.c\&.
.PP
References listener::bus, BUS_LOG, BUS_LOG_SNPRINTF, listener_msg::hold, ListenerHelper_GetFreeMsg(), ListenerHelper_PushMessage(), LOG_LISTENER, LOG_MEMORY, MSG_HOLD_RESPONSE, listener_msg::pipes, listener_msg::type, listener_msg::u, and bus::udata\&.
.SS "bool Listener_ExpectResponse (struct \fBlistener\fP *l, \fBboxed_msg\fP *box, uint16_t *backpressure)"

.PP
The client has finished a write, the listener should expect a response\&. 
.PP
Definition at line 143 of file listener\&.c\&.
.PP
References listener::bus, BUS_ASSERT, BUS_LOG_SNPRINTF, BUS_SEND_UNDEFINED, listener_msg::expect, ListenerHelper_GetFreeMsg(), ListenerHelper_PushMessage(), ListenerTask_GetBackpressure(), LOG_MEMORY, MSG_EXPECT_RESPONSE, boxed_msg::out_seq_id, boxed_msg::result, bus_msg_result_t::status, listener_msg::type, listener_msg::u, and bus::udata\&.
.SS "bool Listener_Shutdown (struct \fBlistener\fP *l, int *notify_fd)"

.PP
Shut down the listener\&. Blocking\&. 
.PP
Definition at line 170 of file listener\&.c\&.
.PP
References ListenerHelper_GetFreeMsg(), ListenerHelper_PushMessage(), MSG_SHUTDOWN, listener_msg::pipes, listener_msg::shutdown, listener_msg::type, and listener_msg::u\&.
.SS "void Listener_Free (struct \fBlistener\fP *l)"

.PP
Free the listener, which must already be shut down\&. 
.PP
Definition at line 179 of file listener\&.c\&.
.PP
References listener_msg::add_socket, listener::bus, BUS_ASSERT, BUS_LOG_SNPRINTF, listener::commit_pipe, listener_msg::expect, rx_info_t::expect, listener::incoming_msg_pipe, LISTENER_SHUTDOWN_COMPLETE_FD, ListenerCmd_NotifyCaller(), LOG_LISTENER, MAX_PENDING_MESSAGES, MAX_QUEUE_MESSAGES, MSG_ADD_SOCKET, MSG_EXPECT_RESPONSE, MSG_REMOVE_SOCKET, listener::msgs, listener_msg::pipes, listener::read_buf, listener_msg::remove_socket, RIS_EXPECT, RIS_HOLD, RIS_INACTIVE, listener::rx_info, listener::shutdown_notify_fd, rx_info_t::state, syscall_close(), listener_msg::type, listener_msg::u, rx_info_t::u, and bus::udata\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for kinetic-c from the source code\&.
