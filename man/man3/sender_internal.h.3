.TH "sender_internal.h" 3 "Mon Mar 2 2015" "Version v0.12.0-beta" "kinetic-c" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sender_internal.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'sender\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBfd_info\fP"
.br
.ti -1c
.RI "struct \fBtx_info_t\fP"
.br
.ti -1c
.RI "struct \fBsender\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBMAX_TIMEOUT\fP   100"
.br
.ti -1c
.RI "#define \fBTX_TIMEOUT\fP   9"
.br
.ti -1c
.RI "#define \fBMAX_CONCURRENT_SENDS\fP   32"
.br
.ti -1c
.RI "#define \fBHASH_TABLE_SIZE2\fP   6 /* should be > log2(\fBMAX_CONCURRENT_SENDS\fP) */"
.br
.ti -1c
.RI "#define \fBSENDER_FD_NOT_IN_USE\fP   (-1)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef uint32_t \fBtx_flag_t\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBtx_error_t\fP "
.br
.ti -1c
.RI "enum \fBtx_info_state\fP "
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "static \fBtx_info_t\fP * \fBget_free_tx_info\fP (struct \fBsender\fP *s)"
.br
.ti -1c
.RI "static void \fBrelease_tx_info\fP (struct \fBsender\fP *s, \fBtx_info_t\fP *info)"
.br
.ti -1c
.RI "static int \fBget_notify_pipe\fP (struct \fBsender\fP *s, int id)"
.br
.ti -1c
.RI "static bool \fBwrite_commit\fP (struct \fBsender\fP *s, \fBtx_info_t\fP *info)"
.br
.ti -1c
.RI "static \fBtx_error_t\fP \fBcommit_event_and_block\fP (struct \fBsender\fP *s, \fBtx_info_t\fP *info)"
.br
.ti -1c
.RI "static bool \fBregister_socket_info\fP (\fBsender\fP *s, int fd, SSL *ssl)"
.br
.ti -1c
.RI "static void \fBincrement_fd_refcount\fP (\fBsender\fP *s, \fBfd_info\fP *fdi)"
.br
.ti -1c
.RI "static void \fBdecrement_fd_refcount\fP (\fBsender\fP *s, \fBfd_info\fP *fdi)"
.br
.ti -1c
.RI "static bool \fBrelease_socket_info\fP (\fBsender\fP *s, int fd)"
.br
.ti -1c
.RI "static void \fBhandle_command\fP (\fBsender\fP *s, int id)"
.br
.ti -1c
.RI "static void \fBenqueue_write\fP (struct \fBsender\fP *s, \fBtx_info_t\fP *info)"
.br
.ti -1c
.RI "static bool \fBcheck_incoming_commands\fP (struct \fBsender\fP *s)"
.br
.ti -1c
.RI "static \fBtx_info_t\fP * \fBget_info_to_write_for_socket\fP (\fBsender\fP *s, int fd)"
.br
.ti -1c
.RI "static void \fBset_error_for_socket\fP (\fBsender\fP *s, int fd, \fBtx_error_t\fP error)"
.br
.ti -1c
.RI "static ssize_t \fBsocket_write_plain\fP (\fBsender\fP *s, \fBtx_info_t\fP *info)"
.br
.ti -1c
.RI "static ssize_t \fBsocket_write_ssl\fP (\fBsender\fP *s, \fBtx_info_t\fP *info, SSL *ssl)"
.br
.ti -1c
.RI "static void \fBupdate_sent\fP (struct \fBbus\fP *b, \fBsender\fP *s, \fBtx_info_t\fP *info, ssize_t sent)"
.br
.ti -1c
.RI "static void \fBattempt_write\fP (\fBsender\fP *s, int available)"
.br
.ti -1c
.RI "static void \fBtick_handler\fP (\fBsender\fP *s)"
.br
.ti -1c
.RI "static void \fBnotify_message_failure\fP (\fBsender\fP *s, \fBtx_info_t\fP *info, \fBbus_send_status_t\fP status)"
.br
.ti -1c
.RI "static void \fBattempt_to_enqueue_sending_request_message_to_listener\fP (\fBsender\fP *s, int fd, int64_t seq_id, int16_t timeout_sec)"
.br
.ti -1c
.RI "static void \fBattempt_to_enqueue_request_sent_message_to_listener\fP (\fBsender\fP *s, \fBtx_info_t\fP *info)"
.br
.ti -1c
.RI "static void \fBnotify_caller\fP (\fBsender\fP *s, \fBtx_info_t\fP *info, bool success)"
.br
.ti -1c
.RI "static void \fBtick_timeout\fP (\fBsender\fP *s, \fBtx_info_t\fP *info)"
.br
.ti -1c
.RI "static void \fBcleanup\fP (\fBsender\fP *s)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define MAX_TIMEOUT   100"

.PP
Definition at line 25 of file sender_internal\&.h\&.
.SS "#define TX_TIMEOUT   9"

.PP
Definition at line 26 of file sender_internal\&.h\&.
.SS "#define MAX_CONCURRENT_SENDS   32"

.PP
Definition at line 33 of file sender_internal\&.h\&.
.SS "#define HASH_TABLE_SIZE2   6 /* should be > log2(\fBMAX_CONCURRENT_SENDS\fP) */"

.PP
Definition at line 36 of file sender_internal\&.h\&.
.SS "#define SENDER_FD_NOT_IN_USE   (-1)"

.PP
Definition at line 38 of file sender_internal\&.h\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef uint32_t \fBtx_flag_t\fP"

.PP
Definition at line 34 of file sender_internal\&.h\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBtx_error_t\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITX_ERROR_NONE \fP\fP
.TP
\fB\fITX_ERROR_POLLHUP \fP\fP
.TP
\fB\fITX_ERROR_POLLERR \fP\fP
.TP
\fB\fITX_ERROR_WRITE_FAILURE \fP\fP
.TP
\fB\fITX_ERROR_UNREGISTERED_SOCKET \fP\fP
.TP
\fB\fITX_ERROR_CLOSED \fP\fP
.TP
\fB\fITX_ERROR_NOTIFY_LISTENER_FAILURE \fP\fP
.TP
\fB\fITX_ERROR_WRITE_TIMEOUT \fP\fP
.TP
\fB\fITX_ERROR_NOTIFY_TIMEOUT \fP\fP
.TP
\fB\fITX_ERROR_BAD_SEQUENCE_ID \fP\fP
.PP
Definition at line 39 of file sender_internal\&.h\&.
.SS "enum \fBtx_info_state\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITIS_UNDEF \fP\fP
.TP
\fB\fITIS_ADD_SOCKET \fP\fP
.TP
\fB\fITIS_RM_SOCKET \fP\fP
.TP
\fB\fITIS_SHUTDOWN \fP\fP
.TP
\fB\fITIS_REQUEST_ENQUEUE \fP\fP
.TP
\fB\fITIS_REQUEST_WRITE \fP\fP
.TP
\fB\fITIS_RESPONSE_NOTIFY \fP\fP
.TP
\fB\fITIS_REQUEST_RELEASE \fP\fP
.TP
\fB\fITIS_ERROR \fP\fP
.PP
Definition at line 52 of file sender_internal\&.h\&.
.SH "Function Documentation"
.PP 
.SS "static \fBtx_info_t\fP* get_free_tx_info (struct \fBsender\fP *s)\fC [static]\fP"

.SS "static void release_tx_info (struct \fBsender\fP *s, \fBtx_info_t\fP *info)\fC [static]\fP"

.SS "static int get_notify_pipe (struct \fBsender\fP *s, intid)\fC [static]\fP"

.SS "static bool write_commit (struct \fBsender\fP *s, \fBtx_info_t\fP *info)\fC [static]\fP"

.SS "static \fBtx_error_t\fP commit_event_and_block (struct \fBsender\fP *s, \fBtx_info_t\fP *info)\fC [static]\fP"

.SS "static bool register_socket_info (\fBsender\fP *s, intfd, SSL *ssl)\fC [static]\fP"

.SS "static void increment_fd_refcount (\fBsender\fP *s, \fBfd_info\fP *fdi)\fC [static]\fP"

.SS "static void decrement_fd_refcount (\fBsender\fP *s, \fBfd_info\fP *fdi)\fC [static]\fP"

.SS "static bool release_socket_info (\fBsender\fP *s, intfd)\fC [static]\fP"

.SS "static void handle_command (\fBsender\fP *s, intid)\fC [static]\fP"

.SS "static void enqueue_write (struct \fBsender\fP *s, \fBtx_info_t\fP *info)\fC [static]\fP"

.SS "static bool check_incoming_commands (struct \fBsender\fP *s)\fC [static]\fP"

.SS "static \fBtx_info_t\fP* get_info_to_write_for_socket (\fBsender\fP *s, intfd)\fC [static]\fP"

.SS "static void set_error_for_socket (\fBsender\fP *s, intfd, \fBtx_error_t\fPerror)\fC [static]\fP"

.SS "static ssize_t socket_write_plain (\fBsender\fP *s, \fBtx_info_t\fP *info)\fC [static]\fP"

.SS "static ssize_t socket_write_ssl (\fBsender\fP *s, \fBtx_info_t\fP *info, SSL *ssl)\fC [static]\fP"

.SS "static void update_sent (struct \fBbus\fP *b, \fBsender\fP *s, \fBtx_info_t\fP *info, ssize_tsent)\fC [static]\fP"

.SS "static void attempt_write (\fBsender\fP *s, intavailable)\fC [static]\fP"

.SS "static void tick_handler (\fBsender\fP *s)\fC [static]\fP"

.SS "static void notify_message_failure (\fBsender\fP *s, \fBtx_info_t\fP *info, \fBbus_send_status_t\fPstatus)\fC [static]\fP"

.SS "static void attempt_to_enqueue_sending_request_message_to_listener (\fBsender\fP *s, intfd, int64_tseq_id, int16_ttimeout_sec)\fC [static]\fP"

.SS "static void attempt_to_enqueue_request_sent_message_to_listener (\fBsender\fP *s, \fBtx_info_t\fP *info)\fC [static]\fP"

.SS "static void notify_caller (\fBsender\fP *s, \fBtx_info_t\fP *info, boolsuccess)\fC [static]\fP"

.SS "static void tick_timeout (\fBsender\fP *s, \fBtx_info_t\fP *info)\fC [static]\fP"

.SS "static void cleanup (\fBsender\fP *s)\fC [static]\fP"

.SH "Author"
.PP 
Generated automatically by Doxygen for kinetic-c from the source code\&.
