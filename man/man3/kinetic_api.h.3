.TH "kinetic_api.h" 3 "Fri Aug 8 2014" "Version v0.5.0" "protobuf-c" \" -*- nroff -*-
.ad l
.nh
.SH NAME
kinetic_api.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'kinetic_types\&.h'\fP
.br
\fC#include 'kinetic_exchange\&.h'\fP
.br
\fC#include 'kinetic_pdu\&.h'\fP
.br
\fC#include 'kinetic_operation\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBKineticApi_Init\fP (const char *logFile)"
.br
.RI "\fIInitializes the Kinetic API andcsonfigures logging destination\&. \fP"
.ti -1c
.RI "bool \fBKineticApi_Connect\fP (\fBKineticConnection\fP *connection, const char *host, int port, bool blocking)"
.br
.RI "\fIEstablishes a Kinetic protocol socket connection to a host\&. \fP"
.ti -1c
.RI "bool \fBKineticApi_ConfigureExchange\fP (\fBKineticExchange\fP *exchange, \fBKineticConnection\fP *connection, int64_t clusterVersion, int64_t identity, const char *key, size_t keyLength)"
.br
.RI "\fIInitializes and configures a Kinetic exchange\&. \fP"
.ti -1c
.RI "\fBKineticOperation\fP \fBKineticApi_CreateOperation\fP (\fBKineticExchange\fP *exchange, \fBKineticPDU\fP *request, \fBKineticMessage\fP *requestMsg, \fBKineticPDU\fP *response)"
.br
.RI "\fICreates and initializes a Kinetic operation\&. \fP"
.ti -1c
.RI "\fBKineticProto_Status_StatusCode\fP \fBKineticApi_NoOp\fP (\fBKineticOperation\fP *operation)"
.br
.RI "\fIExecutes a NOOP command to test whether the Kinetic Device is operational\&. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "void KineticApi_Init (const char *logFile)"

.PP
Initializes the Kinetic API andcsonfigures logging destination\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlogFile\fP Path to log file\&. Specify NULL to log to STDOUT\&. 
.RE
.PP

.PP
Definition at line 27 of file kinetic_api\&.c\&.
.PP
References KineticLogger_Init()\&.
.SS "bool KineticApi_Connect (\fBKineticConnection\fP *connection, const char *host, intport, boolblocking)"

.PP
Establishes a Kinetic protocol socket connection to a host\&. 
.PP
\fBParameters:\fP
.RS 4
\fIconnection\fP \fBKineticConnection\fP instance to configure with connection info 
.br
\fIhost\fP Host name or IP address to connect to 
.br
\fIport\fP Port to establish socket connection on 
.br
\fIblocking\fP Set to true for blocking or false for non-bloocking I/O 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns true if connection succeeded 
.RE
.PP

.PP
Definition at line 32 of file kinetic_api\&.c\&.
.PP
References KineticConnection::connected, KineticConnection_Connect(), KineticConnection_Init(), LOG, and KineticConnection::socketDescriptor\&.
.SS "bool KineticApi_ConfigureExchange (\fBKineticExchange\fP *exchange, \fBKineticConnection\fP *connection, int64_tclusterVersion, int64_tidentity, const char *key, size_tkeyLength)"

.PP
Initializes and configures a Kinetic exchange\&. 
.PP
\fBParameters:\fP
.RS 4
\fIexchange\fP \fBKineticExchange\fP instance to configure with exchange info 
.br
\fIconnection\fP \fBKineticConnection\fP to associate with exchange 
.br
\fIclusterVersion\fP Cluster version for the exchange 
.br
\fIidentity\fP Identity to use for the exchange 
.br
\fIkey\fP Key to use for HMAC calculations 
.br
\fIkeyLength\fP Length of HMAC key 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns true if configuration succeeded 
.RE
.PP

.PP
Definition at line 55 of file kinetic_api\&.c\&.
.PP
References KineticExchange_ConfigureConnectionID(), KineticExchange_Init(), KineticExchange_SetClusterVersion(), and LOG\&.
.SS "\fBKineticOperation\fP KineticApi_CreateOperation (\fBKineticExchange\fP *exchange, \fBKineticPDU\fP *request, \fBKineticMessage\fP *requestMsg, \fBKineticPDU\fP *response)"

.PP
Creates and initializes a Kinetic operation\&. 
.PP
\fBParameters:\fP
.RS 4
\fIexchange\fP \fBKineticExchange\fP instance to populate with exchange info 
.br
\fIrequest\fP \fBKineticPDU\fP instance to use for request 
.br
\fIrequestMsg\fP \fBKineticMessage\fP instance to use for request 
.br
\fIresponse\fP \fBKineticPDU\fP instance to use for reponse 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns a configured operation instance 
.RE
.PP

.PP
Definition at line 88 of file kinetic_api\&.c\&.
.PP
References KineticOperation::exchange, KineticMessage_Init(), KineticPDU_Init(), LOG, KineticPDU::message, KineticPDU::proto, KineticOperation::request, and KineticOperation::response\&.
.SS "\fBKineticProto_Status_StatusCode\fP KineticApi_NoOp (\fBKineticOperation\fP *operation)"

.PP
Executes a NOOP command to test whether the Kinetic Device is operational\&. 
.PP
\fBParameters:\fP
.RS 4
\fIoperation\fP \fBKineticOperation\fP instance to use for the operation 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns the resultant status code 
.RE
.PP

.PP
Definition at line 136 of file kinetic_api\&.c\&.
.PP
References KineticExchange::connection, KineticOperation::exchange, KineticPDU::exchange, KINETIC_PROTO_STATUS_STATUS_CODE_INVALID_STATUS_CODE, KineticExchange_IncrementSequence(), KineticOperation_BuildNoop(), KineticPDU_Receive(), KineticPDU_Send(), KineticPDU::message, KineticPDU::proto, KineticOperation::request, and KineticOperation::response\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for protobuf-c from the source code\&.
