.TH "threadpool_internals.h" 3 "Mon Mar 2 2015" "Version v0.12.0-beta" "kinetic-c" \" -*- nroff -*-
.ad l
.nh
.SH NAME
threadpool_internals.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'threadpool\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBthread_info\fP"
.br
.ti -1c
.RI "struct \fBthread_context\fP"
.br
.ti -1c
.RI "struct \fBmarked_task\fP"
.br
.ti -1c
.RI "struct \fBthreadpool\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBATOMIC_BOOL_COMPARE_AND_SWAP\fP(PTR, OLD, NEW)   (__sync_bool_compare_and_swap(PTR, OLD, NEW))"
.br
.ti -1c
.RI "#define \fBNOTIFY_MSG\fP   '!'"
.br
.ti -1c
.RI "#define \fBNOTIFY_MSG_LEN\fP   1"
.br
.ti -1c
.RI "#define \fBSPIN_ADJ\fP(F, ADJ)"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBthread_status_t\fP "
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "static void \fBnotify_new_task\fP (struct \fBthreadpool\fP *t)"
.br
.ti -1c
.RI "static bool \fBnotify_shutdown\fP (struct \fBthreadpool\fP *t)"
.br
.ti -1c
.RI "static bool \fBspawn\fP (struct \fBthreadpool\fP *t)"
.br
.ti -1c
.RI "static void * \fBthread_task\fP (void *\fBthread_info\fP)"
.br
.ti -1c
.RI "static void \fBcommit_current_task\fP (struct \fBthreadpool\fP *t, struct \fBmarked_task\fP *task, size_t wh)"
.br
.ti -1c
.RI "static void \fBrelease_current_task\fP (struct \fBthreadpool\fP *t, struct \fBmarked_task\fP *task, size_t rh)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define ATOMIC_BOOL_COMPARE_AND_SWAP(PTR, OLD, NEW)   (__sync_bool_compare_and_swap(PTR, OLD, NEW))"

.PP
Definition at line 85 of file threadpool_internals\&.h\&.
.SS "#define NOTIFY_MSG   '!'"

.PP
Definition at line 88 of file threadpool_internals\&.h\&.
.SS "#define NOTIFY_MSG_LEN   1"

.PP
Definition at line 89 of file threadpool_internals\&.h\&.
.SS "#define SPIN_ADJ(F, ADJ)"
\fBValue:\fP
.PP
.nf
do {                                                                \
        for (;;) {                                                      \
            size_t v = F;                                               \
            if (ATOMIC_BOOL_COMPARE_AND_SWAP(&F, v, v + ADJ)) {         \
                break;                                                  \
            }                                                           \
        }                                                               \
    } while (0)
.fi
.PP
Definition at line 92 of file threadpool_internals\&.h\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBthread_status_t\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISTATUS_NONE \fP\fP
.TP
\fB\fISTATUS_ASLEEP \fP\fP
.TP
\fB\fISTATUS_AWAKE \fP\fP
.TP
\fB\fISTATUS_SHUTDOWN \fP\fP
.TP
\fB\fISTATUS_JOINED \fP\fP
.PP
Definition at line 25 of file threadpool_internals\&.h\&.
.SH "Function Documentation"
.PP 
.SS "static void notify_new_task (struct \fBthreadpool\fP *t)\fC [static]\fP"

.SS "static bool notify_shutdown (struct \fBthreadpool\fP *t)\fC [static]\fP"

.SS "static bool spawn (struct \fBthreadpool\fP *t)\fC [static]\fP"

.SS "static void* thread_task (void *thread_info)\fC [static]\fP"

.SS "static void commit_current_task (struct \fBthreadpool\fP *t, struct \fBmarked_task\fP *task, size_twh)\fC [static]\fP"

.SS "static void release_current_task (struct \fBthreadpool\fP *t, struct \fBmarked_task\fP *task, size_trh)\fC [static]\fP"

.SH "Author"
.PP 
Generated automatically by Doxygen for kinetic-c from the source code\&.
