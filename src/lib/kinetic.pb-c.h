/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: kinetic.proto */

#ifndef PROTOBUF_C_kinetic_2eproto__INCLUDED
#define PROTOBUF_C_kinetic_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>
#include <stdbool.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1000001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Com_Seagate_Kinetic_Proto_Local Com_Seagate_Kinetic_Proto_Local;
typedef struct _Com_Seagate_Kinetic_Proto_Message Com_Seagate_Kinetic_Proto_Message;
typedef struct _Com_Seagate_Kinetic_Proto_Message_HMACauth Com_Seagate_Kinetic_Proto_Message_HMACauth;
typedef struct _Com_Seagate_Kinetic_Proto_Message_PINauth Com_Seagate_Kinetic_Proto_Message_PINauth;
typedef struct _Com_Seagate_Kinetic_Proto_Command Com_Seagate_Kinetic_Proto_Command;
typedef struct _Com_Seagate_Kinetic_Proto_Command_Header Com_Seagate_Kinetic_Proto_Command_Header;
typedef struct _Com_Seagate_Kinetic_Proto_Command_Body Com_Seagate_Kinetic_Proto_Command_Body;
typedef struct _Com_Seagate_Kinetic_Proto_Command_Status Com_Seagate_Kinetic_Proto_Command_Status;
typedef struct _Com_Seagate_Kinetic_Proto_Command_KeyValue Com_Seagate_Kinetic_Proto_Command_KeyValue;
typedef struct _Com_Seagate_Kinetic_Proto_Command_Range Com_Seagate_Kinetic_Proto_Command_Range;
typedef struct _Com_Seagate_Kinetic_Proto_Command_Setup Com_Seagate_Kinetic_Proto_Command_Setup;
typedef struct _Com_Seagate_Kinetic_Proto_Command_P2POperation Com_Seagate_Kinetic_Proto_Command_P2POperation;
typedef struct _Com_Seagate_Kinetic_Proto_Command_P2POperation_Operation Com_Seagate_Kinetic_Proto_Command_P2POperation_Operation;
typedef struct _Com_Seagate_Kinetic_Proto_Command_P2POperation_Peer Com_Seagate_Kinetic_Proto_Command_P2POperation_Peer;
typedef struct _Com_Seagate_Kinetic_Proto_Command_GetLog Com_Seagate_Kinetic_Proto_Command_GetLog;
typedef struct _Com_Seagate_Kinetic_Proto_Command_GetLog_Utilization Com_Seagate_Kinetic_Proto_Command_GetLog_Utilization;
typedef struct _Com_Seagate_Kinetic_Proto_Command_GetLog_Temperature Com_Seagate_Kinetic_Proto_Command_GetLog_Temperature;
typedef struct _Com_Seagate_Kinetic_Proto_Command_GetLog_Capacity Com_Seagate_Kinetic_Proto_Command_GetLog_Capacity;
typedef struct _Com_Seagate_Kinetic_Proto_Command_GetLog_Configuration Com_Seagate_Kinetic_Proto_Command_GetLog_Configuration;
typedef struct _Com_Seagate_Kinetic_Proto_Command_GetLog_Configuration_Interface Com_Seagate_Kinetic_Proto_Command_GetLog_Configuration_Interface;
typedef struct _Com_Seagate_Kinetic_Proto_Command_GetLog_Statistics Com_Seagate_Kinetic_Proto_Command_GetLog_Statistics;
typedef struct _Com_Seagate_Kinetic_Proto_Command_GetLog_Limits Com_Seagate_Kinetic_Proto_Command_GetLog_Limits;
typedef struct _Com_Seagate_Kinetic_Proto_Command_GetLog_Device Com_Seagate_Kinetic_Proto_Command_GetLog_Device;
typedef struct _Com_Seagate_Kinetic_Proto_Command_Security Com_Seagate_Kinetic_Proto_Command_Security;
typedef struct _Com_Seagate_Kinetic_Proto_Command_Security_ACL Com_Seagate_Kinetic_Proto_Command_Security_ACL;
typedef struct _Com_Seagate_Kinetic_Proto_Command_Security_ACL_Scope Com_Seagate_Kinetic_Proto_Command_Security_ACL_Scope;
typedef struct _Com_Seagate_Kinetic_Proto_Command_PinOperation Com_Seagate_Kinetic_Proto_Command_PinOperation;


/* --- enums --- */

typedef enum _Com_Seagate_Kinetic_Proto_Message_AuthType {
  COM_SEAGATE_KINETIC_PROTO_MESSAGE_AUTH_TYPE_INVALID_AUTH_TYPE = -1,
  COM_SEAGATE_KINETIC_PROTO_MESSAGE_AUTH_TYPE_HMACAUTH = 1,
  COM_SEAGATE_KINETIC_PROTO_MESSAGE_AUTH_TYPE_PINAUTH = 2,
  COM_SEAGATE_KINETIC_PROTO_MESSAGE_AUTH_TYPE_UNSOLICITEDSTATUS = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(COM_SEAGATE_KINETIC_PROTO_MESSAGE_AUTH_TYPE)
} Com_Seagate_Kinetic_Proto_Message_AuthType;
typedef enum _Com_Seagate_Kinetic_Proto_Command_Status_StatusCode {
  COM_SEAGATE_KINETIC_PROTO_COMMAND_STATUS_STATUS_CODE_INVALID_STATUS_CODE = -1,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_STATUS_STATUS_CODE_NOT_ATTEMPTED = 0,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_STATUS_STATUS_CODE_SUCCESS = 1,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_STATUS_STATUS_CODE_HMAC_FAILURE = 2,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_STATUS_STATUS_CODE_NOT_AUTHORIZED = 3,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_STATUS_STATUS_CODE_VERSION_FAILURE = 4,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_STATUS_STATUS_CODE_INTERNAL_ERROR = 5,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_STATUS_STATUS_CODE_HEADER_REQUIRED = 6,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_STATUS_STATUS_CODE_NOT_FOUND = 7,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_STATUS_STATUS_CODE_VERSION_MISMATCH = 8,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_STATUS_STATUS_CODE_SERVICE_BUSY = 9,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_STATUS_STATUS_CODE_EXPIRED = 10,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_STATUS_STATUS_CODE_DATA_ERROR = 11,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_STATUS_STATUS_CODE_PERM_DATA_ERROR = 12,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_STATUS_STATUS_CODE_REMOTE_CONNECTION_ERROR = 13,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_STATUS_STATUS_CODE_NO_SPACE = 14,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_STATUS_STATUS_CODE_NO_SUCH_HMAC_ALGORITHM = 15,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_STATUS_STATUS_CODE_INVALID_REQUEST = 16,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_STATUS_STATUS_CODE_NESTED_OPERATION_ERRORS = 17,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_STATUS_STATUS_CODE_DEVICE_LOCKED = 18,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_STATUS_STATUS_CODE_DEVICE_ALREADY_UNLOCKED = 19,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_STATUS_STATUS_CODE_CONNECTION_TERMINATED = 20
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(COM_SEAGATE_KINETIC_PROTO_COMMAND_STATUS_STATUS_CODE)
} Com_Seagate_Kinetic_Proto_Command_Status_StatusCode;
typedef enum _Com_Seagate_Kinetic_Proto_Command_GetLog_Type {
  COM_SEAGATE_KINETIC_PROTO_COMMAND_GET_LOG_TYPE_INVALID_TYPE = -1,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_GET_LOG_TYPE_UTILIZATIONS = 0,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_GET_LOG_TYPE_TEMPERATURES = 1,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_GET_LOG_TYPE_CAPACITIES = 2,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_GET_LOG_TYPE_CONFIGURATION = 3,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_GET_LOG_TYPE_STATISTICS = 4,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_GET_LOG_TYPE_MESSAGES = 5,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_GET_LOG_TYPE_LIMITS = 6,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_GET_LOG_TYPE_DEVICE = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(COM_SEAGATE_KINETIC_PROTO_COMMAND_GET_LOG_TYPE)
} Com_Seagate_Kinetic_Proto_Command_GetLog_Type;
typedef enum _Com_Seagate_Kinetic_Proto_Command_Security_ACL_HMACAlgorithm {
  COM_SEAGATE_KINETIC_PROTO_COMMAND_SECURITY_ACL_HMACALGORITHM_INVALID_HMAC_ALGORITHM = -1,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_SECURITY_ACL_HMACALGORITHM_HmacSHA1 = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(COM_SEAGATE_KINETIC_PROTO_COMMAND_SECURITY_ACL_HMACALGORITHM)
} Com_Seagate_Kinetic_Proto_Command_Security_ACL_HMACAlgorithm;
typedef enum _Com_Seagate_Kinetic_Proto_Command_Security_ACL_Permission {
  COM_SEAGATE_KINETIC_PROTO_COMMAND_SECURITY_ACL_PERMISSION_INVALID_PERMISSION = -1,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_SECURITY_ACL_PERMISSION_READ = 0,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_SECURITY_ACL_PERMISSION_WRITE = 1,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_SECURITY_ACL_PERMISSION_DELETE = 2,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_SECURITY_ACL_PERMISSION_RANGE = 3,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_SECURITY_ACL_PERMISSION_SETUP = 4,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_SECURITY_ACL_PERMISSION_P2POP = 5,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_SECURITY_ACL_PERMISSION_GETLOG = 7,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_SECURITY_ACL_PERMISSION_SECURITY = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(COM_SEAGATE_KINETIC_PROTO_COMMAND_SECURITY_ACL_PERMISSION)
} Com_Seagate_Kinetic_Proto_Command_Security_ACL_Permission;
typedef enum _Com_Seagate_Kinetic_Proto_Command_PinOperation_PinOpType {
  COM_SEAGATE_KINETIC_PROTO_COMMAND_PIN_OPERATION_PIN_OP_TYPE_INVALID_PINOP = -1,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_PIN_OPERATION_PIN_OP_TYPE_UNLOCK_PINOP = 1,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_PIN_OPERATION_PIN_OP_TYPE_LOCK_PINOP = 2,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_PIN_OPERATION_PIN_OP_TYPE_ERASE_PINOP = 3,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_PIN_OPERATION_PIN_OP_TYPE_SECURE_ERASE_PINOP = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(COM_SEAGATE_KINETIC_PROTO_COMMAND_PIN_OPERATION_PIN_OP_TYPE)
} Com_Seagate_Kinetic_Proto_Command_PinOperation_PinOpType;
typedef enum _Com_Seagate_Kinetic_Proto_Command_Synchronization {
  COM_SEAGATE_KINETIC_PROTO_COMMAND_SYNCHRONIZATION_INVALID_SYNCHRONIZATION = -1,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_SYNCHRONIZATION_WRITETHROUGH = 1,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_SYNCHRONIZATION_WRITEBACK = 2,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_SYNCHRONIZATION_FLUSH = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(COM_SEAGATE_KINETIC_PROTO_COMMAND_SYNCHRONIZATION)
} Com_Seagate_Kinetic_Proto_Command_Synchronization;
typedef enum _Com_Seagate_Kinetic_Proto_Command_Priority {
  COM_SEAGATE_KINETIC_PROTO_COMMAND_PRIORITY_NORMAL = 5,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_PRIORITY_LOWEST = 1,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_PRIORITY_LOWER = 3,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_PRIORITY_HIGHER = 7,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_PRIORITY_HIGHEST = 9
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(COM_SEAGATE_KINETIC_PROTO_COMMAND_PRIORITY)
} Com_Seagate_Kinetic_Proto_Command_Priority;
typedef enum _Com_Seagate_Kinetic_Proto_Command_Algorithm {
  COM_SEAGATE_KINETIC_PROTO_COMMAND_ALGORITHM_INVALID_ALGORITHM = -1,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_ALGORITHM_SHA1 = 1,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_ALGORITHM_SHA2 = 2,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_ALGORITHM_SHA3 = 3,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_ALGORITHM_CRC32 = 4,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_ALGORITHM_CRC64 = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(COM_SEAGATE_KINETIC_PROTO_COMMAND_ALGORITHM)
} Com_Seagate_Kinetic_Proto_Command_Algorithm;
typedef enum _Com_Seagate_Kinetic_Proto_Command_MessageType {
  COM_SEAGATE_KINETIC_PROTO_COMMAND_MESSAGE_TYPE_INVALID_MESSAGE_TYPE = -1,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_MESSAGE_TYPE_GET = 2,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_MESSAGE_TYPE_GET_RESPONSE = 1,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_MESSAGE_TYPE_PUT = 4,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_MESSAGE_TYPE_PUT_RESPONSE = 3,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_MESSAGE_TYPE_DELETE = 6,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_MESSAGE_TYPE_DELETE_RESPONSE = 5,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_MESSAGE_TYPE_GETNEXT = 8,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_MESSAGE_TYPE_GETNEXT_RESPONSE = 7,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_MESSAGE_TYPE_GETPREVIOUS = 10,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_MESSAGE_TYPE_GETPREVIOUS_RESPONSE = 9,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_MESSAGE_TYPE_GETKEYRANGE = 12,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_MESSAGE_TYPE_GETKEYRANGE_RESPONSE = 11,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_MESSAGE_TYPE_GETVERSION = 16,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_MESSAGE_TYPE_GETVERSION_RESPONSE = 15,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_MESSAGE_TYPE_SETUP = 22,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_MESSAGE_TYPE_SETUP_RESPONSE = 21,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_MESSAGE_TYPE_GETLOG = 24,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_MESSAGE_TYPE_GETLOG_RESPONSE = 23,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_MESSAGE_TYPE_SECURITY = 26,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_MESSAGE_TYPE_SECURITY_RESPONSE = 25,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_MESSAGE_TYPE_PEER2PEERPUSH = 28,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_MESSAGE_TYPE_PEER2PEERPUSH_RESPONSE = 27,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_MESSAGE_TYPE_NOOP = 30,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_MESSAGE_TYPE_NOOP_RESPONSE = 29,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_MESSAGE_TYPE_FLUSHALLDATA = 32,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_MESSAGE_TYPE_FLUSHALLDATA_RESPONSE = 31,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_MESSAGE_TYPE_PINOP = 36,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_MESSAGE_TYPE_PINOP_RESPONSE = 35,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_MESSAGE_TYPE_MEDIASCAN = 38,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_MESSAGE_TYPE_MEDIASCAN_RESPONSE = 37,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_MESSAGE_TYPE_MEDIAOPTIMIZE = 40,
  COM_SEAGATE_KINETIC_PROTO_COMMAND_MESSAGE_TYPE_MEDIAOPTIMIZE_RESPONSE = 39
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(COM_SEAGATE_KINETIC_PROTO_COMMAND_MESSAGE_TYPE)
} Com_Seagate_Kinetic_Proto_Command_MessageType;

/* --- messages --- */

struct  _Com_Seagate_Kinetic_Proto_Local
{
  ProtobufCMessage base;
  char* protocolVersion;
};
extern char com_seagate_kinetic_proto_local_protocol_version_default_value[];
#define COM_SEAGATE_KINETIC_PROTO_LOCAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&com_seagate_kinetic_proto_local__descriptor) \
    , com_seagate_kinetic_proto_local_protocol_version_default_value }


struct  _Com_Seagate_Kinetic_Proto_Message_HMACauth
{
  ProtobufCMessage base;
  protobuf_c_boolean has_identity;
  int64_t identity;
  protobuf_c_boolean has_hmac;
  ProtobufCBinaryData hmac;
};
#define COM_SEAGATE_KINETIC_PROTO_MESSAGE_HMACAUTH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&com_seagate_kinetic_proto_message_hmacauth__descriptor) \
    , 0,0, 0,{0,NULL} }


struct  _Com_Seagate_Kinetic_Proto_Message_PINauth
{
  ProtobufCMessage base;
  protobuf_c_boolean has_pin;
  ProtobufCBinaryData pin;
};
#define COM_SEAGATE_KINETIC_PROTO_MESSAGE_PINAUTH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&com_seagate_kinetic_proto_message_pinauth__descriptor) \
    , 0,{0,NULL} }


struct  _Com_Seagate_Kinetic_Proto_Message
{
  ProtobufCMessage base;
  protobuf_c_boolean has_authType;
  Com_Seagate_Kinetic_Proto_Message_AuthType authType;
  Com_Seagate_Kinetic_Proto_Message_HMACauth *hmacAuth;
  Com_Seagate_Kinetic_Proto_Message_PINauth *pinAuth;
  protobuf_c_boolean has_commandBytes;
  ProtobufCBinaryData commandBytes;
};
#define COM_SEAGATE_KINETIC_PROTO_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&com_seagate_kinetic_proto_message__descriptor) \
    , 0,0, NULL, NULL, 0,{0,NULL} }


struct  _Com_Seagate_Kinetic_Proto_Command_Header
{
  ProtobufCMessage base;
  protobuf_c_boolean has_clusterVersion;
  int64_t clusterVersion;
  protobuf_c_boolean has_connectionID;
  int64_t connectionID;
  protobuf_c_boolean has_sequence;
  int64_t sequence;
  protobuf_c_boolean has_ackSequence;
  int64_t ackSequence;
  protobuf_c_boolean has_messageType;
  Com_Seagate_Kinetic_Proto_Command_MessageType messageType;
  protobuf_c_boolean has_timeout;
  int64_t timeout;
  protobuf_c_boolean has_earlyExit;
  bool earlyExit;
  protobuf_c_boolean has_priority;
  Com_Seagate_Kinetic_Proto_Command_Priority priority;
  protobuf_c_boolean has_TimeQuanta;
  int64_t TimeQuanta;
};
#define COM_SEAGATE_KINETIC_PROTO_COMMAND_HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&com_seagate_kinetic_proto_command_header__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _Com_Seagate_Kinetic_Proto_Command_Body
{
  ProtobufCMessage base;
  Com_Seagate_Kinetic_Proto_Command_KeyValue *keyValue;
  Com_Seagate_Kinetic_Proto_Command_Range *range;
  Com_Seagate_Kinetic_Proto_Command_Setup *setup;
  Com_Seagate_Kinetic_Proto_Command_P2POperation *p2pOperation;
  Com_Seagate_Kinetic_Proto_Command_GetLog *getLog;
  Com_Seagate_Kinetic_Proto_Command_Security *security;
  Com_Seagate_Kinetic_Proto_Command_PinOperation *pinOp;
};
#define COM_SEAGATE_KINETIC_PROTO_COMMAND_BODY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&com_seagate_kinetic_proto_command_body__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, NULL, NULL }


struct  _Com_Seagate_Kinetic_Proto_Command_Status
{
  ProtobufCMessage base;
  protobuf_c_boolean has_code;
  Com_Seagate_Kinetic_Proto_Command_Status_StatusCode code;
  char* statusMessage;
  protobuf_c_boolean has_detailedMessage;
  ProtobufCBinaryData detailedMessage;
};
#define COM_SEAGATE_KINETIC_PROTO_COMMAND_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&com_seagate_kinetic_proto_command_status__descriptor) \
    , 0,0, NULL, 0,{0,NULL} }


struct  _Com_Seagate_Kinetic_Proto_Command_KeyValue
{
  ProtobufCMessage base;
  protobuf_c_boolean has_newVersion;
  ProtobufCBinaryData newVersion;
  protobuf_c_boolean has_force;
  bool force;
  protobuf_c_boolean has_key;
  ProtobufCBinaryData key;
  protobuf_c_boolean has_dbVersion;
  ProtobufCBinaryData dbVersion;
  protobuf_c_boolean has_tag;
  ProtobufCBinaryData tag;
  protobuf_c_boolean has_algorithm;
  Com_Seagate_Kinetic_Proto_Command_Algorithm algorithm;
  protobuf_c_boolean has_metadataOnly;
  bool metadataOnly;
  protobuf_c_boolean has_synchronization;
  Com_Seagate_Kinetic_Proto_Command_Synchronization synchronization;
};
#define COM_SEAGATE_KINETIC_PROTO_COMMAND_KEY_VALUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&com_seagate_kinetic_proto_command_key_value__descriptor) \
    , 0,{0,NULL}, 0,0, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,0, 0,0, 0,0 }


struct  _Com_Seagate_Kinetic_Proto_Command_Range
{
  ProtobufCMessage base;
  protobuf_c_boolean has_startKey;
  ProtobufCBinaryData startKey;
  protobuf_c_boolean has_endKey;
  ProtobufCBinaryData endKey;
  protobuf_c_boolean has_startKeyInclusive;
  bool startKeyInclusive;
  protobuf_c_boolean has_endKeyInclusive;
  bool endKeyInclusive;
  protobuf_c_boolean has_maxReturned;
  int32_t maxReturned;
  protobuf_c_boolean has_reverse;
  bool reverse;
  size_t n_keys;
  ProtobufCBinaryData *keys;
};
#define COM_SEAGATE_KINETIC_PROTO_COMMAND_RANGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&com_seagate_kinetic_proto_command_range__descriptor) \
    , 0,{0,NULL}, 0,{0,NULL}, 0,0, 0,0, 0,0, 0,0, 0,NULL }


struct  _Com_Seagate_Kinetic_Proto_Command_Setup
{
  ProtobufCMessage base;
  protobuf_c_boolean has_newClusterVersion;
  int64_t newClusterVersion;
  protobuf_c_boolean has_firmwareDownload;
  bool firmwareDownload;
};
#define COM_SEAGATE_KINETIC_PROTO_COMMAND_SETUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&com_seagate_kinetic_proto_command_setup__descriptor) \
    , 0,0, 0,0 }


struct  _Com_Seagate_Kinetic_Proto_Command_P2POperation_Operation
{
  ProtobufCMessage base;
  protobuf_c_boolean has_key;
  ProtobufCBinaryData key;
  protobuf_c_boolean has_version;
  ProtobufCBinaryData version;
  protobuf_c_boolean has_newKey;
  ProtobufCBinaryData newKey;
  protobuf_c_boolean has_force;
  bool force;
  Com_Seagate_Kinetic_Proto_Command_Status *status;
  Com_Seagate_Kinetic_Proto_Command_P2POperation *p2pop;
};
#define COM_SEAGATE_KINETIC_PROTO_COMMAND_P2_POPERATION_OPERATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&com_seagate_kinetic_proto_command_p2_poperation_operation__descriptor) \
    , 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,0, NULL, NULL }


struct  _Com_Seagate_Kinetic_Proto_Command_P2POperation_Peer
{
  ProtobufCMessage base;
  char* hostname;
  protobuf_c_boolean has_port;
  int32_t port;
  protobuf_c_boolean has_tls;
  bool tls;
};
#define COM_SEAGATE_KINETIC_PROTO_COMMAND_P2_POPERATION_PEER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&com_seagate_kinetic_proto_command_p2_poperation_peer__descriptor) \
    , NULL, 0,0, 0,0 }


struct  _Com_Seagate_Kinetic_Proto_Command_P2POperation
{
  ProtobufCMessage base;
  Com_Seagate_Kinetic_Proto_Command_P2POperation_Peer *peer;
  size_t n_operation;
  Com_Seagate_Kinetic_Proto_Command_P2POperation_Operation **operation;
  protobuf_c_boolean has_allChildOperationsSucceeded;
  bool allChildOperationsSucceeded;
};
#define COM_SEAGATE_KINETIC_PROTO_COMMAND_P2_POPERATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&com_seagate_kinetic_proto_command_p2_poperation__descriptor) \
    , NULL, 0,NULL, 0,0 }


struct  _Com_Seagate_Kinetic_Proto_Command_GetLog_Utilization
{
  ProtobufCMessage base;
  char* name;
  protobuf_c_boolean has_value;
  float value;
};
#define COM_SEAGATE_KINETIC_PROTO_COMMAND_GET_LOG_UTILIZATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&com_seagate_kinetic_proto_command_get_log_utilization__descriptor) \
    , NULL, 0,0 }


struct  _Com_Seagate_Kinetic_Proto_Command_GetLog_Temperature
{
  ProtobufCMessage base;
  char* name;
  protobuf_c_boolean has_current;
  float current;
  protobuf_c_boolean has_minimum;
  float minimum;
  protobuf_c_boolean has_maximum;
  float maximum;
  protobuf_c_boolean has_target;
  float target;
};
#define COM_SEAGATE_KINETIC_PROTO_COMMAND_GET_LOG_TEMPERATURE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&com_seagate_kinetic_proto_command_get_log_temperature__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0 }


struct  _Com_Seagate_Kinetic_Proto_Command_GetLog_Capacity
{
  ProtobufCMessage base;
  protobuf_c_boolean has_nominalCapacityInBytes;
  uint64_t nominalCapacityInBytes;
  protobuf_c_boolean has_portionFull;
  float portionFull;
};
#define COM_SEAGATE_KINETIC_PROTO_COMMAND_GET_LOG_CAPACITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&com_seagate_kinetic_proto_command_get_log_capacity__descriptor) \
    , 0,0, 0,0 }


struct  _Com_Seagate_Kinetic_Proto_Command_GetLog_Configuration_Interface
{
  ProtobufCMessage base;
  char* name;
  protobuf_c_boolean has_MAC;
  ProtobufCBinaryData MAC;
  protobuf_c_boolean has_ipv4Address;
  ProtobufCBinaryData ipv4Address;
  protobuf_c_boolean has_ipv6Address;
  ProtobufCBinaryData ipv6Address;
};
#define COM_SEAGATE_KINETIC_PROTO_COMMAND_GET_LOG_CONFIGURATION_INTERFACE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&com_seagate_kinetic_proto_command_get_log_configuration_interface__descriptor) \
    , NULL, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL} }


struct  _Com_Seagate_Kinetic_Proto_Command_GetLog_Configuration
{
  ProtobufCMessage base;
  char* vendor;
  char* model;
  protobuf_c_boolean has_serialNumber;
  ProtobufCBinaryData serialNumber;
  protobuf_c_boolean has_worldWideName;
  ProtobufCBinaryData worldWideName;
  char* version;
  char* compilationDate;
  char* sourceHash;
  char* protocolVersion;
  char* protocolCompilationDate;
  char* protocolSourceHash;
  size_t n_interface;
  Com_Seagate_Kinetic_Proto_Command_GetLog_Configuration_Interface **interface;
  protobuf_c_boolean has_port;
  int32_t port;
  protobuf_c_boolean has_tlsPort;
  int32_t tlsPort;
};
#define COM_SEAGATE_KINETIC_PROTO_COMMAND_GET_LOG_CONFIGURATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&com_seagate_kinetic_proto_command_get_log_configuration__descriptor) \
    , NULL, NULL, 0,{0,NULL}, 0,{0,NULL}, NULL, NULL, NULL, NULL, NULL, NULL, 0,NULL, 0,0, 0,0 }


struct  _Com_Seagate_Kinetic_Proto_Command_GetLog_Statistics
{
  ProtobufCMessage base;
  protobuf_c_boolean has_messageType;
  Com_Seagate_Kinetic_Proto_Command_MessageType messageType;
  protobuf_c_boolean has_count;
  uint64_t count;
  protobuf_c_boolean has_bytes;
  uint64_t bytes;
};
#define COM_SEAGATE_KINETIC_PROTO_COMMAND_GET_LOG_STATISTICS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&com_seagate_kinetic_proto_command_get_log_statistics__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _Com_Seagate_Kinetic_Proto_Command_GetLog_Limits
{
  ProtobufCMessage base;
  protobuf_c_boolean has_maxKeySize;
  uint32_t maxKeySize;
  protobuf_c_boolean has_maxValueSize;
  uint32_t maxValueSize;
  protobuf_c_boolean has_maxVersionSize;
  uint32_t maxVersionSize;
  protobuf_c_boolean has_maxTagSize;
  uint32_t maxTagSize;
  protobuf_c_boolean has_maxConnections;
  uint32_t maxConnections;
  protobuf_c_boolean has_maxOutstandingReadRequests;
  uint32_t maxOutstandingReadRequests;
  protobuf_c_boolean has_maxOutstandingWriteRequests;
  uint32_t maxOutstandingWriteRequests;
  protobuf_c_boolean has_maxMessageSize;
  uint32_t maxMessageSize;
  protobuf_c_boolean has_maxKeyRangeCount;
  uint32_t maxKeyRangeCount;
  protobuf_c_boolean has_maxIdentityCount;
  uint32_t maxIdentityCount;
  protobuf_c_boolean has_maxPinSize;
  uint32_t maxPinSize;
};
#define COM_SEAGATE_KINETIC_PROTO_COMMAND_GET_LOG_LIMITS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&com_seagate_kinetic_proto_command_get_log_limits__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _Com_Seagate_Kinetic_Proto_Command_GetLog_Device
{
  ProtobufCMessage base;
  protobuf_c_boolean has_name;
  ProtobufCBinaryData name;
};
#define COM_SEAGATE_KINETIC_PROTO_COMMAND_GET_LOG_DEVICE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&com_seagate_kinetic_proto_command_get_log_device__descriptor) \
    , 0,{0,NULL} }


struct  _Com_Seagate_Kinetic_Proto_Command_GetLog
{
  ProtobufCMessage base;
  size_t n_types;
  Com_Seagate_Kinetic_Proto_Command_GetLog_Type *types;
  size_t n_utilizations;
  Com_Seagate_Kinetic_Proto_Command_GetLog_Utilization **utilizations;
  size_t n_temperatures;
  Com_Seagate_Kinetic_Proto_Command_GetLog_Temperature **temperatures;
  Com_Seagate_Kinetic_Proto_Command_GetLog_Capacity *capacity;
  Com_Seagate_Kinetic_Proto_Command_GetLog_Configuration *configuration;
  size_t n_statistics;
  Com_Seagate_Kinetic_Proto_Command_GetLog_Statistics **statistics;
  protobuf_c_boolean has_messages;
  ProtobufCBinaryData messages;
  Com_Seagate_Kinetic_Proto_Command_GetLog_Limits *limits;
  Com_Seagate_Kinetic_Proto_Command_GetLog_Device *device;
};
#define COM_SEAGATE_KINETIC_PROTO_COMMAND_GET_LOG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&com_seagate_kinetic_proto_command_get_log__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL, NULL, NULL, 0,NULL, 0,{0,NULL}, NULL, NULL }


struct  _Com_Seagate_Kinetic_Proto_Command_Security_ACL_Scope
{
  ProtobufCMessage base;
  protobuf_c_boolean has_offset;
  int64_t offset;
  protobuf_c_boolean has_value;
  ProtobufCBinaryData value;
  size_t n_permission;
  Com_Seagate_Kinetic_Proto_Command_Security_ACL_Permission *permission;
  protobuf_c_boolean has_TlsRequired;
  bool TlsRequired;
};
#define COM_SEAGATE_KINETIC_PROTO_COMMAND_SECURITY_ACL_SCOPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&com_seagate_kinetic_proto_command_security_acl_scope__descriptor) \
    , 0,0, 0,{0,NULL}, 0,NULL, 0,0 }


struct  _Com_Seagate_Kinetic_Proto_Command_Security_ACL
{
  ProtobufCMessage base;
  protobuf_c_boolean has_identity;
  int64_t identity;
  protobuf_c_boolean has_key;
  ProtobufCBinaryData key;
  protobuf_c_boolean has_hmacAlgorithm;
  Com_Seagate_Kinetic_Proto_Command_Security_ACL_HMACAlgorithm hmacAlgorithm;
  size_t n_scope;
  Com_Seagate_Kinetic_Proto_Command_Security_ACL_Scope **scope;
  protobuf_c_boolean has_maxPriority;
  Com_Seagate_Kinetic_Proto_Command_Priority maxPriority;
};
#define COM_SEAGATE_KINETIC_PROTO_COMMAND_SECURITY_ACL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&com_seagate_kinetic_proto_command_security_acl__descriptor) \
    , 0,0, 0,{0,NULL}, 0,0, 0,NULL, 0,0 }


struct  _Com_Seagate_Kinetic_Proto_Command_Security
{
  ProtobufCMessage base;
  size_t n_acl;
  Com_Seagate_Kinetic_Proto_Command_Security_ACL **acl;
  protobuf_c_boolean has_oldLockPIN;
  ProtobufCBinaryData oldLockPIN;
  protobuf_c_boolean has_newLockPIN;
  ProtobufCBinaryData newLockPIN;
  protobuf_c_boolean has_oldErasePIN;
  ProtobufCBinaryData oldErasePIN;
  protobuf_c_boolean has_newErasePIN;
  ProtobufCBinaryData newErasePIN;
};
#define COM_SEAGATE_KINETIC_PROTO_COMMAND_SECURITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&com_seagate_kinetic_proto_command_security__descriptor) \
    , 0,NULL, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL} }


struct  _Com_Seagate_Kinetic_Proto_Command_PinOperation
{
  ProtobufCMessage base;
  protobuf_c_boolean has_pinOpType;
  Com_Seagate_Kinetic_Proto_Command_PinOperation_PinOpType pinOpType;
};
#define COM_SEAGATE_KINETIC_PROTO_COMMAND_PIN_OPERATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&com_seagate_kinetic_proto_command_pin_operation__descriptor) \
    , 0,0 }


struct  _Com_Seagate_Kinetic_Proto_Command
{
  ProtobufCMessage base;
  Com_Seagate_Kinetic_Proto_Command_Header *header;
  Com_Seagate_Kinetic_Proto_Command_Body *body;
  Com_Seagate_Kinetic_Proto_Command_Status *status;
};
#define COM_SEAGATE_KINETIC_PROTO_COMMAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&com_seagate_kinetic_proto_command__descriptor) \
    , NULL, NULL, NULL }


/* Com_Seagate_Kinetic_Proto_Local methods */
void com_seagate_kinetic_proto_local__init
  (Com_Seagate_Kinetic_Proto_Local* message);
size_t com_seagate_kinetic_proto_local__get_packed_size(
  const Com_Seagate_Kinetic_Proto_Local *message);
size_t com_seagate_kinetic_proto_local__pack(
  const Com_Seagate_Kinetic_Proto_Local *message,
  uint8_t* out);
size_t com_seagate_kinetic_proto_local__pack_to_buffer(
  const Com_Seagate_Kinetic_Proto_Local* message,
  ProtobufCBuffer* buffer);
Com_Seagate_Kinetic_Proto_Local * com_seagate_kinetic_proto_local__unpack(
    ProtobufCAllocator* allocator,
    size_t len,
    const uint8_t* data);
void com_seagate_kinetic_proto_local__free_unpacked(
  Com_Seagate_Kinetic_Proto_Local* message,
  ProtobufCAllocator* allocator);
/* Com_Seagate_Kinetic_Proto_Message_HMACauth methods */
void com_seagate_kinetic_proto_message_hmacauth__init
  (Com_Seagate_Kinetic_Proto_Message_HMACauth* message);
/* Com_Seagate_Kinetic_Proto_Message_PINauth methods */
void com_seagate_kinetic_proto_message_pinauth__init
  (Com_Seagate_Kinetic_Proto_Message_PINauth* message);
/* Com_Seagate_Kinetic_Proto_Message methods */
void com_seagate_kinetic_proto_message__init
  (Com_Seagate_Kinetic_Proto_Message* message);
size_t com_seagate_kinetic_proto_message__get_packed_size(
  const Com_Seagate_Kinetic_Proto_Message *message);
size_t com_seagate_kinetic_proto_message__pack(
  const Com_Seagate_Kinetic_Proto_Message *message,
  uint8_t* out);
size_t com_seagate_kinetic_proto_message__pack_to_buffer(
  const Com_Seagate_Kinetic_Proto_Message* message,
  ProtobufCBuffer* buffer);
Com_Seagate_Kinetic_Proto_Message * com_seagate_kinetic_proto_message__unpack(
    ProtobufCAllocator* allocator,
    size_t len,
    const uint8_t* data);
void com_seagate_kinetic_proto_message__free_unpacked(
  Com_Seagate_Kinetic_Proto_Message* message,
  ProtobufCAllocator* allocator);
/* Com_Seagate_Kinetic_Proto_Command_Header methods */
void com_seagate_kinetic_proto_command_header__init
  (Com_Seagate_Kinetic_Proto_Command_Header* message);
/* Com_Seagate_Kinetic_Proto_Command_Body methods */
void com_seagate_kinetic_proto_command_body__init
  (Com_Seagate_Kinetic_Proto_Command_Body* message);
/* Com_Seagate_Kinetic_Proto_Command_Status methods */
void com_seagate_kinetic_proto_command_status__init
  (Com_Seagate_Kinetic_Proto_Command_Status* message);
/* Com_Seagate_Kinetic_Proto_Command_KeyValue methods */
void com_seagate_kinetic_proto_command_key_value__init
  (Com_Seagate_Kinetic_Proto_Command_KeyValue* message);
/* Com_Seagate_Kinetic_Proto_Command_Range methods */
void com_seagate_kinetic_proto_command_range__init
  (Com_Seagate_Kinetic_Proto_Command_Range* message);
/* Com_Seagate_Kinetic_Proto_Command_Setup methods */
void com_seagate_kinetic_proto_command_setup__init
  (Com_Seagate_Kinetic_Proto_Command_Setup* message);
/* Com_Seagate_Kinetic_Proto_Command_P2POperation_Operation methods */
void com_seagate_kinetic_proto_command_p2_poperation_operation__init
  (Com_Seagate_Kinetic_Proto_Command_P2POperation_Operation* message);
/* Com_Seagate_Kinetic_Proto_Command_P2POperation_Peer methods */
void com_seagate_kinetic_proto_command_p2_poperation_peer__init
  (Com_Seagate_Kinetic_Proto_Command_P2POperation_Peer* message);
/* Com_Seagate_Kinetic_Proto_Command_P2POperation methods */
void com_seagate_kinetic_proto_command_p2_poperation__init
  (Com_Seagate_Kinetic_Proto_Command_P2POperation* message);
/* Com_Seagate_Kinetic_Proto_Command_GetLog_Utilization methods */
void com_seagate_kinetic_proto_command_get_log_utilization__init
  (Com_Seagate_Kinetic_Proto_Command_GetLog_Utilization* message);
/* Com_Seagate_Kinetic_Proto_Command_GetLog_Temperature methods */
void com_seagate_kinetic_proto_command_get_log_temperature__init
  (Com_Seagate_Kinetic_Proto_Command_GetLog_Temperature* message);
/* Com_Seagate_Kinetic_Proto_Command_GetLog_Capacity methods */
void com_seagate_kinetic_proto_command_get_log_capacity__init
  (Com_Seagate_Kinetic_Proto_Command_GetLog_Capacity* message);
/* Com_Seagate_Kinetic_Proto_Command_GetLog_Configuration_Interface methods */
void com_seagate_kinetic_proto_command_get_log_configuration_interface__init
  (Com_Seagate_Kinetic_Proto_Command_GetLog_Configuration_Interface* message);
/* Com_Seagate_Kinetic_Proto_Command_GetLog_Configuration methods */
void com_seagate_kinetic_proto_command_get_log_configuration__init
  (Com_Seagate_Kinetic_Proto_Command_GetLog_Configuration* message);
/* Com_Seagate_Kinetic_Proto_Command_GetLog_Statistics methods */
void com_seagate_kinetic_proto_command_get_log_statistics__init
  (Com_Seagate_Kinetic_Proto_Command_GetLog_Statistics* message);
/* Com_Seagate_Kinetic_Proto_Command_GetLog_Limits methods */
void com_seagate_kinetic_proto_command_get_log_limits__init
  (Com_Seagate_Kinetic_Proto_Command_GetLog_Limits* message);
/* Com_Seagate_Kinetic_Proto_Command_GetLog_Device methods */
void com_seagate_kinetic_proto_command_get_log_device__init
  (Com_Seagate_Kinetic_Proto_Command_GetLog_Device* message);
/* Com_Seagate_Kinetic_Proto_Command_GetLog methods */
void com_seagate_kinetic_proto_command_get_log__init
  (Com_Seagate_Kinetic_Proto_Command_GetLog* message);
/* Com_Seagate_Kinetic_Proto_Command_Security_ACL_Scope methods */
void com_seagate_kinetic_proto_command_security_acl_scope__init
  (Com_Seagate_Kinetic_Proto_Command_Security_ACL_Scope* message);
/* Com_Seagate_Kinetic_Proto_Command_Security_ACL methods */
void com_seagate_kinetic_proto_command_security_acl__init
  (Com_Seagate_Kinetic_Proto_Command_Security_ACL* message);
/* Com_Seagate_Kinetic_Proto_Command_Security methods */
void com_seagate_kinetic_proto_command_security__init
  (Com_Seagate_Kinetic_Proto_Command_Security* message);
/* Com_Seagate_Kinetic_Proto_Command_PinOperation methods */
void com_seagate_kinetic_proto_command_pin_operation__init
  (Com_Seagate_Kinetic_Proto_Command_PinOperation* message);
/* Com_Seagate_Kinetic_Proto_Command methods */
void com_seagate_kinetic_proto_command__init
  (Com_Seagate_Kinetic_Proto_Command* message);
size_t com_seagate_kinetic_proto_command__get_packed_size(
  const Com_Seagate_Kinetic_Proto_Command *message);
size_t com_seagate_kinetic_proto_command__pack(
  const Com_Seagate_Kinetic_Proto_Command *message,
  uint8_t* out);
size_t com_seagate_kinetic_proto_command__pack_to_buffer(
  const Com_Seagate_Kinetic_Proto_Command* message,
  ProtobufCBuffer* buffer);
Com_Seagate_Kinetic_Proto_Command * com_seagate_kinetic_proto_command__unpack(
    ProtobufCAllocator* allocator,
    size_t len,
    const uint8_t* data);
void com_seagate_kinetic_proto_command__free_unpacked(
  Com_Seagate_Kinetic_Proto_Command* message,
  ProtobufCAllocator* allocator);
/* --- per-message closures --- */

typedef void (*Com_Seagate_Kinetic_Proto_Local_Closure) (
  const Com_Seagate_Kinetic_Proto_Local* message,
  void* closure_data);
typedef void (*Com_Seagate_Kinetic_Proto_Message_HMACauth_Closure) (
  const Com_Seagate_Kinetic_Proto_Message_HMACauth* message,
  void* closure_data);
typedef void (*Com_Seagate_Kinetic_Proto_Message_PINauth_Closure) (
  const Com_Seagate_Kinetic_Proto_Message_PINauth* message,
  void* closure_data);
typedef void (*Com_Seagate_Kinetic_Proto_Message_Closure) (
  const Com_Seagate_Kinetic_Proto_Message* message,
  void* closure_data);
typedef void (*Com_Seagate_Kinetic_Proto_Command_Header_Closure) (
  const Com_Seagate_Kinetic_Proto_Command_Header* message,
  void* closure_data);
typedef void (*Com_Seagate_Kinetic_Proto_Command_Body_Closure) (
  const Com_Seagate_Kinetic_Proto_Command_Body* message,
  void* closure_data);
typedef void (*Com_Seagate_Kinetic_Proto_Command_Status_Closure) (
  const Com_Seagate_Kinetic_Proto_Command_Status* message,
  void* closure_data);
typedef void (*Com_Seagate_Kinetic_Proto_Command_KeyValue_Closure) (
  const Com_Seagate_Kinetic_Proto_Command_KeyValue* message,
  void* closure_data);
typedef void (*Com_Seagate_Kinetic_Proto_Command_Range_Closure) (
  const Com_Seagate_Kinetic_Proto_Command_Range* message,
  void* closure_data);
typedef void (*Com_Seagate_Kinetic_Proto_Command_Setup_Closure) (
  const Com_Seagate_Kinetic_Proto_Command_Setup* message,
  void* closure_data);
typedef void (*Com_Seagate_Kinetic_Proto_Command_P2POperation_Operation_Closure) (
  const Com_Seagate_Kinetic_Proto_Command_P2POperation_Operation* message,
  void* closure_data);
typedef void (*Com_Seagate_Kinetic_Proto_Command_P2POperation_Peer_Closure) (
  const Com_Seagate_Kinetic_Proto_Command_P2POperation_Peer* message,
  void* closure_data);
typedef void (*Com_Seagate_Kinetic_Proto_Command_P2POperation_Closure) (
  const Com_Seagate_Kinetic_Proto_Command_P2POperation* message,
  void* closure_data);
typedef void (*Com_Seagate_Kinetic_Proto_Command_GetLog_Utilization_Closure) (
  const Com_Seagate_Kinetic_Proto_Command_GetLog_Utilization* message,
  void* closure_data);
typedef void (*Com_Seagate_Kinetic_Proto_Command_GetLog_Temperature_Closure) (
  const Com_Seagate_Kinetic_Proto_Command_GetLog_Temperature* message,
  void* closure_data);
typedef void (*Com_Seagate_Kinetic_Proto_Command_GetLog_Capacity_Closure) (
  const Com_Seagate_Kinetic_Proto_Command_GetLog_Capacity* message,
  void* closure_data);
typedef void (*Com_Seagate_Kinetic_Proto_Command_GetLog_Configuration_Interface_Closure) (
  const Com_Seagate_Kinetic_Proto_Command_GetLog_Configuration_Interface* message,
  void* closure_data);
typedef void (*Com_Seagate_Kinetic_Proto_Command_GetLog_Configuration_Closure) (
  const Com_Seagate_Kinetic_Proto_Command_GetLog_Configuration* message,
  void* closure_data);
typedef void (*Com_Seagate_Kinetic_Proto_Command_GetLog_Statistics_Closure) (
  const Com_Seagate_Kinetic_Proto_Command_GetLog_Statistics* message,
  void* closure_data);
typedef void (*Com_Seagate_Kinetic_Proto_Command_GetLog_Limits_Closure) (
  const Com_Seagate_Kinetic_Proto_Command_GetLog_Limits* message,
  void* closure_data);
typedef void (*Com_Seagate_Kinetic_Proto_Command_GetLog_Device_Closure) (
  const Com_Seagate_Kinetic_Proto_Command_GetLog_Device* message,
  void* closure_data);
typedef void (*Com_Seagate_Kinetic_Proto_Command_GetLog_Closure) (
  const Com_Seagate_Kinetic_Proto_Command_GetLog* message,
  void* closure_data);
typedef void (*Com_Seagate_Kinetic_Proto_Command_Security_ACL_Scope_Closure) (
  const Com_Seagate_Kinetic_Proto_Command_Security_ACL_Scope* message,
  void* closure_data);
typedef void (*Com_Seagate_Kinetic_Proto_Command_Security_ACL_Closure) (
  const Com_Seagate_Kinetic_Proto_Command_Security_ACL* message,
  void* closure_data);
typedef void (*Com_Seagate_Kinetic_Proto_Command_Security_Closure) (
  const Com_Seagate_Kinetic_Proto_Command_Security* message,
  void* closure_data);
typedef void (*Com_Seagate_Kinetic_Proto_Command_PinOperation_Closure) (
  const Com_Seagate_Kinetic_Proto_Command_PinOperation* message,
  void* closure_data);
typedef void (*Com_Seagate_Kinetic_Proto_Command_Closure) (
  const Com_Seagate_Kinetic_Proto_Command* message,
  void* closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor com_seagate_kinetic_proto_local__descriptor;
extern const ProtobufCMessageDescriptor com_seagate_kinetic_proto_message__descriptor;
extern const ProtobufCMessageDescriptor com_seagate_kinetic_proto_message_hmacauth__descriptor;
extern const ProtobufCMessageDescriptor com_seagate_kinetic_proto_message_pinauth__descriptor;
extern const ProtobufCEnumDescriptor    com_seagate_kinetic_proto_message_auth_type__descriptor;
extern const ProtobufCMessageDescriptor com_seagate_kinetic_proto_command__descriptor;
extern const ProtobufCMessageDescriptor com_seagate_kinetic_proto_command_header__descriptor;
extern const ProtobufCMessageDescriptor com_seagate_kinetic_proto_command_body__descriptor;
extern const ProtobufCMessageDescriptor com_seagate_kinetic_proto_command_status__descriptor;
extern const ProtobufCEnumDescriptor    com_seagate_kinetic_proto_command_status_status_code__descriptor;
extern const ProtobufCMessageDescriptor com_seagate_kinetic_proto_command_key_value__descriptor;
extern const ProtobufCMessageDescriptor com_seagate_kinetic_proto_command_range__descriptor;
extern const ProtobufCMessageDescriptor com_seagate_kinetic_proto_command_setup__descriptor;
extern const ProtobufCMessageDescriptor com_seagate_kinetic_proto_command_p2_poperation__descriptor;
extern const ProtobufCMessageDescriptor com_seagate_kinetic_proto_command_p2_poperation_operation__descriptor;
extern const ProtobufCMessageDescriptor com_seagate_kinetic_proto_command_p2_poperation_peer__descriptor;
extern const ProtobufCMessageDescriptor com_seagate_kinetic_proto_command_get_log__descriptor;
extern const ProtobufCMessageDescriptor com_seagate_kinetic_proto_command_get_log_utilization__descriptor;
extern const ProtobufCMessageDescriptor com_seagate_kinetic_proto_command_get_log_temperature__descriptor;
extern const ProtobufCMessageDescriptor com_seagate_kinetic_proto_command_get_log_capacity__descriptor;
extern const ProtobufCMessageDescriptor com_seagate_kinetic_proto_command_get_log_configuration__descriptor;
extern const ProtobufCMessageDescriptor com_seagate_kinetic_proto_command_get_log_configuration_interface__descriptor;
extern const ProtobufCMessageDescriptor com_seagate_kinetic_proto_command_get_log_statistics__descriptor;
extern const ProtobufCMessageDescriptor com_seagate_kinetic_proto_command_get_log_limits__descriptor;
extern const ProtobufCMessageDescriptor com_seagate_kinetic_proto_command_get_log_device__descriptor;
extern const ProtobufCEnumDescriptor    com_seagate_kinetic_proto_command_get_log_type__descriptor;
extern const ProtobufCMessageDescriptor com_seagate_kinetic_proto_command_security__descriptor;
extern const ProtobufCMessageDescriptor com_seagate_kinetic_proto_command_security_acl__descriptor;
extern const ProtobufCMessageDescriptor com_seagate_kinetic_proto_command_security_acl_scope__descriptor;
extern const ProtobufCEnumDescriptor    com_seagate_kinetic_proto_command_security_acl_hmacalgorithm__descriptor;
extern const ProtobufCEnumDescriptor    com_seagate_kinetic_proto_command_security_acl_permission__descriptor;
extern const ProtobufCMessageDescriptor com_seagate_kinetic_proto_command_pin_operation__descriptor;
extern const ProtobufCEnumDescriptor    com_seagate_kinetic_proto_command_pin_operation_pin_op_type__descriptor;
extern const ProtobufCEnumDescriptor    com_seagate_kinetic_proto_command_synchronization__descriptor;
extern const ProtobufCEnumDescriptor    com_seagate_kinetic_proto_command_priority__descriptor;
extern const ProtobufCEnumDescriptor    com_seagate_kinetic_proto_command_algorithm__descriptor;
extern const ProtobufCEnumDescriptor    com_seagate_kinetic_proto_command_message_type__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_kinetic_2eproto__INCLUDED */
