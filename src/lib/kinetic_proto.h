/*
* kinetic-c
* Copyright (C) 2014 Seagate Technology.
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*
*/

/*
 * Generated by the protocol buffer compiler protoc-c.
 * Generated wtih: protobuf-c 1.0.0-rc1, libprotoc 2.5.0
 * Generated from: kinetic.proto
 */

#ifndef _KINETIC_PROTO_H
#define _KINETIC_PROTO_H

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1000000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

typedef struct _KineticProto KineticProto;
typedef struct _KineticProto_Command KineticProto_Command;
typedef struct _KineticProto_Header KineticProto_Header;
typedef struct _KineticProto_Body KineticProto_Body;
typedef struct _KineticProto_Status KineticProto_Status;
typedef struct _KineticProto_KeyValue KineticProto_KeyValue;
typedef struct _KineticProto_Range KineticProto_Range;
typedef struct _KineticProto_Setup KineticProto_Setup;
typedef struct _KineticProto_P2POperation KineticProto_P2POperation;
typedef struct _KineticProto_P2POperation_Operation KineticProto_P2POperation_Operation;
typedef struct _KineticProto_P2POperation_Peer KineticProto_P2POperation_Peer;
typedef struct _KineticProto_GetLog KineticProto_GetLog;
typedef struct _KineticProto_GetLog_Utilization KineticProto_GetLog_Utilization;
typedef struct _KineticProto_GetLog_Temperature KineticProto_GetLog_Temperature;
typedef struct _KineticProto_GetLog_Capacity KineticProto_GetLog_Capacity;
typedef struct _KineticProto_GetLog_Configuration KineticProto_GetLog_Configuration;
typedef struct _KineticProto_GetLog_Configuration_Interface KineticProto_GetLog_Configuration_Interface;
typedef struct _KineticProto_GetLog_Statistics KineticProto_GetLog_Statistics;
typedef struct _KineticProto_GetLog_Limits KineticProto_GetLog_Limits;
typedef struct _KineticProto_Security KineticProto_Security;
typedef struct _KineticProto_Security_ACL KineticProto_Security_ACL;
typedef struct _KineticProto_Security_ACL_Scope KineticProto_Security_ACL_Scope;

/* --- enums --- */

typedef enum _KineticProto_Status_StatusCode
{
    KINETIC_PROTO_STATUS_STATUS_CODE_INVALID_STATUS_CODE = -1,
    KINETIC_PROTO_STATUS_STATUS_CODE_NOT_ATTEMPTED = 0,
    KINETIC_PROTO_STATUS_STATUS_CODE_SUCCESS = 1,
    KINETIC_PROTO_STATUS_STATUS_CODE_HMAC_FAILURE = 2,
    KINETIC_PROTO_STATUS_STATUS_CODE_NOT_AUTHORIZED = 3,
    KINETIC_PROTO_STATUS_STATUS_CODE_VERSION_FAILURE = 4,
    KINETIC_PROTO_STATUS_STATUS_CODE_INTERNAL_ERROR = 5,
    KINETIC_PROTO_STATUS_STATUS_CODE_HEADER_REQUIRED = 6,
    KINETIC_PROTO_STATUS_STATUS_CODE_NOT_FOUND = 7,
    KINETIC_PROTO_STATUS_STATUS_CODE_VERSION_MISMATCH = 8,
    KINETIC_PROTO_STATUS_STATUS_CODE_SERVICE_BUSY = 9,
    KINETIC_PROTO_STATUS_STATUS_CODE_EXPIRED = 10,
    KINETIC_PROTO_STATUS_STATUS_CODE_DATA_ERROR = 11,
    KINETIC_PROTO_STATUS_STATUS_CODE_PERM_DATA_ERROR = 12,
    KINETIC_PROTO_STATUS_STATUS_CODE_REMOTE_CONNECTION_ERROR = 13,
    KINETIC_PROTO_STATUS_STATUS_CODE_NO_SPACE = 14,
    KINETIC_PROTO_STATUS_STATUS_CODE_NO_SUCH_HMAC_ALGORITHM = 15,
    KINETIC_PROTO_STATUS_STATUS_CODE_INVALID_REQUEST = 16,
    KINETIC_PROTO_STATUS_STATUS_CODE_NESTED_OPERATION_ERRORS = 17
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(KINETIC_PROTO_STATUS_STATUS_CODE)
} KineticProto_Status_StatusCode;
typedef enum _KineticProto_GetLog_Type
{
    KINETIC_PROTO_GET_LOG_TYPE_INVALID_TYPE = -1,
    KINETIC_PROTO_GET_LOG_TYPE_UTILIZATIONS = 0,
    KINETIC_PROTO_GET_LOG_TYPE_TEMPERATURES = 1,
    KINETIC_PROTO_GET_LOG_TYPE_CAPACITIES = 2,
    KINETIC_PROTO_GET_LOG_TYPE_CONFIGURATION = 3,
    KINETIC_PROTO_GET_LOG_TYPE_STATISTICS = 4,
    KINETIC_PROTO_GET_LOG_TYPE_MESSAGES = 5,
    KINETIC_PROTO_GET_LOG_TYPE_LIMITS = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(KINETIC_PROTO_GET_LOG_TYPE)
} KineticProto_GetLog_Type;
typedef enum _KineticProto_Security_ACL_HMACAlgorithm
{
    KINETIC_PROTO_SECURITY_ACL_HMACALGORITHM_INVALID_HMAC_ALGORITHM = -1,
    KINETIC_PROTO_SECURITY_ACL_HMACALGORITHM_HmacSHA1 = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(KINETIC_PROTO_SECURITY_ACL_HMACALGORITHM)
} KineticProto_Security_ACL_HMACAlgorithm;
typedef enum _KineticProto_Security_ACL_Permission
{
    KINETIC_PROTO_SECURITY_ACL_PERMISSION_INVALID_PERMISSION = -1,
    KINETIC_PROTO_SECURITY_ACL_PERMISSION_READ = 0,
    KINETIC_PROTO_SECURITY_ACL_PERMISSION_WRITE = 1,
    KINETIC_PROTO_SECURITY_ACL_PERMISSION_DELETE = 2,
    KINETIC_PROTO_SECURITY_ACL_PERMISSION_RANGE = 3,
    KINETIC_PROTO_SECURITY_ACL_PERMISSION_SETUP = 4,
    KINETIC_PROTO_SECURITY_ACL_PERMISSION_P2POP = 5,
    KINETIC_PROTO_SECURITY_ACL_PERMISSION_GETLOG = 7,
    KINETIC_PROTO_SECURITY_ACL_PERMISSION_SECURITY = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(KINETIC_PROTO_SECURITY_ACL_PERMISSION)
} KineticProto_Security_ACL_Permission;
typedef enum _KineticProto_Synchronization
{
    KINETIC_PROTO_SYNCHRONIZATION_INVALID_SYNCHRONIZATION = -1,
    KINETIC_PROTO_SYNCHRONIZATION_WRITETHROUGH = 1,
    KINETIC_PROTO_SYNCHRONIZATION_WRITEBACK = 2,
    KINETIC_PROTO_SYNCHRONIZATION_FLUSH = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(KINETIC_PROTO_SYNCHRONIZATION)
} KineticProto_Synchronization;
typedef enum _KineticProto_Algorithm
{
    KINETIC_PROTO_ALGORITHM_INVALID_ALGORITHM = -1,
    KINETIC_PROTO_ALGORITHM_SHA1 = 1,
    KINETIC_PROTO_ALGORITHM_SHA2 = 2,
    KINETIC_PROTO_ALGORITHM_SHA3 = 3,
    KINETIC_PROTO_ALGORITHM_CRC32 = 4,
    KINETIC_PROTO_ALGORITHM_CRC64 = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(KINETIC_PROTO_ALGORITHM)
} KineticProto_Algorithm;
typedef enum _KineticProto_MessageType
{
    KINETIC_PROTO_MESSAGE_TYPE_INVALID_MESSAGE_TYPE = -1,
    KINETIC_PROTO_MESSAGE_TYPE_GET = 2,
    KINETIC_PROTO_MESSAGE_TYPE_GET_RESPONSE = 1,
    KINETIC_PROTO_MESSAGE_TYPE_PUT = 4,
    KINETIC_PROTO_MESSAGE_TYPE_PUT_RESPONSE = 3,
    KINETIC_PROTO_MESSAGE_TYPE_DELETE = 6,
    KINETIC_PROTO_MESSAGE_TYPE_DELETE_RESPONSE = 5,
    KINETIC_PROTO_MESSAGE_TYPE_GETNEXT = 8,
    KINETIC_PROTO_MESSAGE_TYPE_GETNEXT_RESPONSE = 7,
    KINETIC_PROTO_MESSAGE_TYPE_GETPREVIOUS = 10,
    KINETIC_PROTO_MESSAGE_TYPE_GETPREVIOUS_RESPONSE = 9,
    KINETIC_PROTO_MESSAGE_TYPE_GETKEYRANGE = 12,
    KINETIC_PROTO_MESSAGE_TYPE_GETKEYRANGE_RESPONSE = 11,
    KINETIC_PROTO_MESSAGE_TYPE_GETVERSION = 16,
    KINETIC_PROTO_MESSAGE_TYPE_GETVERSION_RESPONSE = 15,
    KINETIC_PROTO_MESSAGE_TYPE_SETUP = 22,
    KINETIC_PROTO_MESSAGE_TYPE_SETUP_RESPONSE = 21,
    KINETIC_PROTO_MESSAGE_TYPE_GETLOG = 24,
    KINETIC_PROTO_MESSAGE_TYPE_GETLOG_RESPONSE = 23,
    KINETIC_PROTO_MESSAGE_TYPE_SECURITY = 26,
    KINETIC_PROTO_MESSAGE_TYPE_SECURITY_RESPONSE = 25,
    KINETIC_PROTO_MESSAGE_TYPE_PEER2PEERPUSH = 28,
    KINETIC_PROTO_MESSAGE_TYPE_PEER2PEERPUSH_RESPONSE = 27,
    KINETIC_PROTO_MESSAGE_TYPE_NOOP = 30,
    KINETIC_PROTO_MESSAGE_TYPE_NOOP_RESPONSE = 29,
    KINETIC_PROTO_MESSAGE_TYPE_FLUSHALLDATA = 32,
    KINETIC_PROTO_MESSAGE_TYPE_FLUSHALLDATA_RESPONSE = 31
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(KINETIC_PROTO_MESSAGE_TYPE)
} KineticProto_MessageType;

/* --- messages --- */

struct _KineticProto_Command
{
    ProtobufCMessage base;
    KineticProto_Header* header;
    KineticProto_Body* body;
    KineticProto_Status* status;
};
#define KINETIC_PROTO_COMMAND_INIT \
 { PROTOBUF_C_MESSAGE_INIT (&KineticProto_command_descriptor) \
    , NULL, NULL, NULL }

struct _KineticProto_Header
{
    ProtobufCMessage base;
    protobuf_c_boolean has_clusterversion;
    int64_t clusterversion;
    protobuf_c_boolean has_identity;
    int64_t identity;
    protobuf_c_boolean has_connectionid;
    int64_t connectionid;
    protobuf_c_boolean has_sequence;
    int64_t sequence;
    protobuf_c_boolean has_acksequence;
    int64_t acksequence;
    protobuf_c_boolean has_messagetype;
    KineticProto_MessageType messagetype;
    protobuf_c_boolean has_timeout;
    int64_t timeout;
    protobuf_c_boolean has_earlyexit;
    protobuf_c_boolean earlyexit;
    protobuf_c_boolean has_backgroundscan;
    protobuf_c_boolean backgroundscan;
};
#define KINETIC_PROTO_HEADER_INIT \
 { PROTOBUF_C_MESSAGE_INIT (&KineticProto_header_descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }

struct _KineticProto_Body
{
    ProtobufCMessage base;
    KineticProto_KeyValue* keyvalue;
    KineticProto_Range* range;
    KineticProto_Setup* setup;
    KineticProto_P2POperation* p2poperation;
    KineticProto_GetLog* getlog;
    KineticProto_Security* security;
};
#define KINETIC_PROTO_BODY_INIT \
 { PROTOBUF_C_MESSAGE_INIT (&KineticProto_body_descriptor) \
    , NULL, NULL, NULL, NULL, NULL, NULL }

struct _KineticProto_Status
{
    ProtobufCMessage base;
    protobuf_c_boolean has_code;
    KineticProto_Status_StatusCode code;
    char* statusmessage;
    protobuf_c_boolean has_detailedmessage;
    ProtobufCBinaryData detailedmessage;
};
#define KINETIC_PROTO_STATUS_INIT \
 { PROTOBUF_C_MESSAGE_INIT (&KineticProto_status_descriptor) \
    , 0,0, NULL, 0,{0,NULL} }

struct _KineticProto_KeyValue
{
    ProtobufCMessage base;
    protobuf_c_boolean has_newversion;
    ProtobufCBinaryData newversion;
    protobuf_c_boolean has_force;
    protobuf_c_boolean force;
    protobuf_c_boolean has_key;
    ProtobufCBinaryData key;
    protobuf_c_boolean has_dbversion;
    ProtobufCBinaryData dbversion;
    protobuf_c_boolean has_tag;
    ProtobufCBinaryData tag;
    protobuf_c_boolean has_algorithm;
    KineticProto_Algorithm algorithm;
    protobuf_c_boolean has_metadataonly;
    protobuf_c_boolean metadataonly;
    protobuf_c_boolean has_synchronization;
    KineticProto_Synchronization synchronization;
};
#define KINETIC_PROTO_KEY_VALUE_INIT \
 { PROTOBUF_C_MESSAGE_INIT (&KineticProto_key_value_descriptor) \
    , 0,{0,NULL}, 0,0, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,0, 0,0, 0,0 }

struct _KineticProto_Range
{
    ProtobufCMessage base;
    protobuf_c_boolean has_startkey;
    ProtobufCBinaryData startkey;
    protobuf_c_boolean has_endkey;
    ProtobufCBinaryData endkey;
    protobuf_c_boolean has_startkeyinclusive;
    protobuf_c_boolean startkeyinclusive;
    protobuf_c_boolean has_endkeyinclusive;
    protobuf_c_boolean endkeyinclusive;
    protobuf_c_boolean has_maxreturned;
    int32_t maxreturned;
    protobuf_c_boolean has_reverse;
    protobuf_c_boolean reverse;
    size_t n_key;
    ProtobufCBinaryData* key;
};
#define KINETIC_PROTO_RANGE_INIT \
 { PROTOBUF_C_MESSAGE_INIT (&KineticProto_range_descriptor) \
    , 0,{0,NULL}, 0,{0,NULL}, 0,0, 0,0, 0,0, 0,0, 0,NULL }

struct _KineticProto_Setup
{
    ProtobufCMessage base;
    protobuf_c_boolean has_newclusterversion;
    int64_t newclusterversion;
    protobuf_c_boolean has_instantsecureerase;
    protobuf_c_boolean instantsecureerase;
    protobuf_c_boolean has_setpin;
    ProtobufCBinaryData setpin;
    protobuf_c_boolean has_pin;
    ProtobufCBinaryData pin;
    protobuf_c_boolean has_firmwaredownload;
    protobuf_c_boolean firmwaredownload;
};
#define KINETIC_PROTO_SETUP_INIT \
 { PROTOBUF_C_MESSAGE_INIT (&KineticProto_setup_descriptor) \
    , 0,0, 0,0, 0,{0,NULL}, 0,{0,NULL}, 0,0 }

struct _KineticProto_P2POperation_Operation
{
    ProtobufCMessage base;
    protobuf_c_boolean has_key;
    ProtobufCBinaryData key;
    protobuf_c_boolean has_version;
    ProtobufCBinaryData version;
    protobuf_c_boolean has_newkey;
    ProtobufCBinaryData newkey;
    protobuf_c_boolean has_force;
    protobuf_c_boolean force;
    KineticProto_Status* status;
    KineticProto_P2POperation* p2pop;
};
#define KINETIC_PROTO_P2_POPERATION_OPERATION_INIT \
 { PROTOBUF_C_MESSAGE_INIT (&KineticProto_p2_poperation_operation_descriptor) \
    , 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,0, NULL, NULL }

struct _KineticProto_P2POperation_Peer
{
    ProtobufCMessage base;
    char* hostname;
    protobuf_c_boolean has_port;
    int32_t port;
    protobuf_c_boolean has_tls;
    protobuf_c_boolean tls;
};
#define KINETIC_PROTO_P2_POPERATION_PEER_INIT \
 { PROTOBUF_C_MESSAGE_INIT (&KineticProto_p2_poperation_peer_descriptor) \
    , NULL, 0,0, 0,0 }

struct _KineticProto_P2POperation
{
    ProtobufCMessage base;
    KineticProto_P2POperation_Peer* peer;
    size_t n_operation;
    KineticProto_P2POperation_Operation** operation;
    protobuf_c_boolean has_allchildoperationssucceeded;
    protobuf_c_boolean allchildoperationssucceeded;
};
#define KINETIC_PROTO_P2_POPERATION_INIT \
 { PROTOBUF_C_MESSAGE_INIT (&KineticProto_p2_poperation_descriptor) \
    , NULL, 0,NULL, 0,0 }

struct _KineticProto_GetLog_Utilization
{
    ProtobufCMessage base;
    char* name;
    protobuf_c_boolean has_value;
    float value;
};
#define KINETIC_PROTO_GET_LOG_UTILIZATION_INIT \
 { PROTOBUF_C_MESSAGE_INIT (&KineticProto_get_log_utilization_descriptor) \
    , NULL, 0,0 }

struct _KineticProto_GetLog_Temperature
{
    ProtobufCMessage base;
    char* name;
    protobuf_c_boolean has_current;
    float current;
    protobuf_c_boolean has_minimum;
    float minimum;
    protobuf_c_boolean has_maximum;
    float maximum;
    protobuf_c_boolean has_target;
    float target;
};
#define KINETIC_PROTO_GET_LOG_TEMPERATURE_INIT \
 { PROTOBUF_C_MESSAGE_INIT (&KineticProto_get_log_temperature_descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0 }

struct _KineticProto_GetLog_Capacity
{
    ProtobufCMessage base;
    protobuf_c_boolean has_nominalcapacityinbytes;
    uint64_t nominalcapacityinbytes;
    protobuf_c_boolean has_portionfull;
    float portionfull;
};
#define KINETIC_PROTO_GET_LOG_CAPACITY_INIT \
 { PROTOBUF_C_MESSAGE_INIT (&KineticProto_get_log_capacity_descriptor) \
    , 0,0, 0,0 }

struct _KineticProto_GetLog_Configuration_Interface
{
    ProtobufCMessage base;
    char* name;
    protobuf_c_boolean has_mac;
    ProtobufCBinaryData mac;
    protobuf_c_boolean has_ipv4address;
    ProtobufCBinaryData ipv4address;
    protobuf_c_boolean has_ipv6address;
    ProtobufCBinaryData ipv6address;
};
#define KINETIC_PROTO_GET_LOG_CONFIGURATION_INTERFACE_INIT \
 { PROTOBUF_C_MESSAGE_INIT (&KineticProto_get_log_configuration_interface_descriptor) \
    , NULL, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL} }

struct _KineticProto_GetLog_Configuration
{
    ProtobufCMessage base;
    char* vendor;
    char* model;
    protobuf_c_boolean has_serialnumber;
    ProtobufCBinaryData serialnumber;
    protobuf_c_boolean has_worldwidename;
    ProtobufCBinaryData worldwidename;
    char* version;
    char* compilationdate;
    char* sourcehash;
    char* protocolversion;
    char* protocolcompilationdate;
    char* protocolsourcehash;
    size_t n_interface;
    KineticProto_GetLog_Configuration_Interface** interface;
    protobuf_c_boolean has_port;
    int32_t port;
    protobuf_c_boolean has_tlsport;
    int32_t tlsport;
};
#define KINETIC_PROTO_GET_LOG_CONFIGURATION_INIT \
 { PROTOBUF_C_MESSAGE_INIT (&KineticProto_get_log_configuration_descriptor) \
    , NULL, NULL, 0,{0,NULL}, 0,{0,NULL}, NULL, NULL, NULL, NULL, NULL, NULL, 0,NULL, 0,0, 0,0 }

struct _KineticProto_GetLog_Statistics
{
    ProtobufCMessage base;
    protobuf_c_boolean has_messagetype;
    KineticProto_MessageType messagetype;
    protobuf_c_boolean has_count;
    uint64_t count;
    protobuf_c_boolean has_bytes;
    uint64_t bytes;
};
#define KINETIC_PROTO_GET_LOG_STATISTICS_INIT \
 { PROTOBUF_C_MESSAGE_INIT (&KineticProto_get_log_statistics_descriptor) \
    , 0,0, 0,0, 0,0 }

struct _KineticProto_GetLog_Limits
{
    ProtobufCMessage base;
    protobuf_c_boolean has_maxkeysize;
    uint32_t maxkeysize;
    protobuf_c_boolean has_maxvaluesize;
    uint32_t maxvaluesize;
    protobuf_c_boolean has_maxversionsize;
    uint32_t maxversionsize;
    protobuf_c_boolean has_maxtagsize;
    uint32_t maxtagsize;
    protobuf_c_boolean has_maxconnections;
    uint32_t maxconnections;
    protobuf_c_boolean has_maxoutstandingreadrequests;
    uint32_t maxoutstandingreadrequests;
    protobuf_c_boolean has_maxoutstandingwriterequests;
    uint32_t maxoutstandingwriterequests;
    protobuf_c_boolean has_maxmessagesize;
    uint32_t maxmessagesize;
    protobuf_c_boolean has_maxkeyrangecount;
    uint32_t maxkeyrangecount;
};
#define KINETIC_PROTO_GET_LOG_LIMITS_INIT \
 { PROTOBUF_C_MESSAGE_INIT (&KineticProto_get_log_limits_descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }

struct _KineticProto_GetLog
{
    ProtobufCMessage base;
    size_t n_type;
    KineticProto_GetLog_Type* type;
    size_t n_utilization;
    KineticProto_GetLog_Utilization** utilization;
    size_t n_temperature;
    KineticProto_GetLog_Temperature** temperature;
    KineticProto_GetLog_Capacity* capacity;
    KineticProto_GetLog_Configuration* configuration;
    size_t n_statistics;
    KineticProto_GetLog_Statistics** statistics;
    protobuf_c_boolean has_messages;
    ProtobufCBinaryData messages;
    KineticProto_GetLog_Limits* limits;
};
#define KINETIC_PROTO_GET_LOG_INIT \
 { PROTOBUF_C_MESSAGE_INIT (&KineticProto_get_log_descriptor) \
    , 0,NULL, 0,NULL, 0,NULL, NULL, NULL, 0,NULL, 0,{0,NULL}, NULL }

struct _KineticProto_Security_ACL_Scope
{
    ProtobufCMessage base;
    protobuf_c_boolean has_offset;
    int64_t offset;
    protobuf_c_boolean has_value;
    ProtobufCBinaryData value;
    size_t n_permission;
    KineticProto_Security_ACL_Permission* permission;
    protobuf_c_boolean has_tlsrequired;
    protobuf_c_boolean tlsrequired;
};
#define KINETIC_PROTO_SECURITY_ACL_SCOPE_INIT \
 { PROTOBUF_C_MESSAGE_INIT (&KineticProto_security_acl_scope_descriptor) \
    , 0,0, 0,{0,NULL}, 0,NULL, 0,0 }

struct _KineticProto_Security_ACL
{
    ProtobufCMessage base;
    protobuf_c_boolean has_identity;
    int64_t identity;
    protobuf_c_boolean has_key;
    ProtobufCBinaryData key;
    protobuf_c_boolean has_hmacalgorithm;
    KineticProto_Security_ACL_HMACAlgorithm hmacalgorithm;
    size_t n_scope;
    KineticProto_Security_ACL_Scope** scope;
};
#define KINETIC_PROTO_SECURITY_ACL_INIT \
 { PROTOBUF_C_MESSAGE_INIT (&KineticProto_security_acl_descriptor) \
    , 0,0, 0,{0,NULL}, 0,0, 0,NULL }

struct _KineticProto_Security
{
    ProtobufCMessage base;
    size_t n_acl;
    KineticProto_Security_ACL** acl;
};
#define KINETIC_PROTO_SECURITY_INIT \
 { PROTOBUF_C_MESSAGE_INIT (&KineticProto_security_descriptor) \
    , 0,NULL }

struct _KineticProto
{
    ProtobufCMessage base;
    KineticProto_Command* command;
    protobuf_c_boolean has_hmac;
    ProtobufCBinaryData hmac;
};
#define KINETIC_PROTO_INIT \
 { PROTOBUF_C_MESSAGE_INIT (&KineticProto_descriptor) \
    , NULL, 0,{0,NULL} }

/* KineticProto_Command methods */
void KineticProto_command_init(KineticProto_Command* message);
/* KineticProto_Header methods */
void KineticProto_header_init(KineticProto_Header* message);
/* KineticProto_Body methods */
void KineticProto_body_init(KineticProto_Body* message);
/* KineticProto_Status methods */
void KineticProto_status_init(KineticProto_Status* message);
/* KineticProto_KeyValue methods */
void KineticProto_key_value_init(KineticProto_KeyValue* message);
/* KineticProto_Range methods */
void KineticProto_range_init(KineticProto_Range* message);
/* KineticProto_Setup methods */
void KineticProto_setup_init(KineticProto_Setup* message);
/* KineticProto_P2POperation_Operation methods */
void KineticProto_p2_poperation_operation_init(KineticProto_P2POperation_Operation* message);
/* KineticProto_P2POperation_Peer methods */
void KineticProto_p2_poperation_peer_init(KineticProto_P2POperation_Peer* message);
/* KineticProto_P2POperation methods */
void KineticProto_p2_poperation_init(KineticProto_P2POperation* message);
/* KineticProto_GetLog_Utilization methods */
void KineticProto_get_log_utilization_init(KineticProto_GetLog_Utilization* message);
/* KineticProto_GetLog_Temperature methods */
void KineticProto_get_log_temperature_init(KineticProto_GetLog_Temperature* message);
/* KineticProto_GetLog_Capacity methods */
void KineticProto_get_log_capacity_init(KineticProto_GetLog_Capacity* message);
/* KineticProto_GetLog_Configuration_Interface methods */
void KineticProto_get_log_configuration_interface_init(KineticProto_GetLog_Configuration_Interface* message);
/* KineticProto_GetLog_Configuration methods */
void KineticProto_get_log_configuration_init(KineticProto_GetLog_Configuration* message);
/* KineticProto_GetLog_Statistics methods */
void KineticProto_get_log_statistics_init(KineticProto_GetLog_Statistics* message);
/* KineticProto_GetLog_Limits methods */
void KineticProto_get_log_limits_init(KineticProto_GetLog_Limits* message);
/* KineticProto_GetLog methods */
void KineticProto_get_log_init(KineticProto_GetLog* message);
/* KineticProto_Security_ACL_Scope methods */
void KineticProto_security_acl_scope_init(KineticProto_Security_ACL_Scope* message);
/* KineticProto_Security_ACL methods */
void KineticProto_security_acl_init(KineticProto_Security_ACL* message);
/* KineticProto_Security methods */
void KineticProto_security_init(KineticProto_Security* message);
/* KineticProto methods */
void KineticProto_init(KineticProto* message);
size_t KineticProto_get_packed_size(const KineticProto* message);
size_t KineticProto_pack(const KineticProto* message, uint8_t* out);
size_t KineticProto_pack_to_buffer(const KineticProto* message, ProtobufCBuffer* buffer);
KineticProto* KineticProto_unpack(ProtobufCAllocator* allocator, size_t len, const uint8_t* data);
void KineticProto_free_unpacked(KineticProto* message, ProtobufCAllocator* allocator);
/* --- per-message closures --- */

typedef void (*KineticProto_Command_Closure)(const KineticProto_Command* message, void* closure_data);
typedef void (*KineticProto_Header_Closure)(const KineticProto_Header* message, void* closure_data);
typedef void (*KineticProto_Body_Closure)(const KineticProto_Body* message, void* closure_data);
typedef void (*KineticProto_Status_Closure)(const KineticProto_Status* message, void* closure_data);
typedef void (*KineticProto_KeyValue_Closure)(const KineticProto_KeyValue* message, void* closure_data);
typedef void (*KineticProto_Range_Closure)(const KineticProto_Range* message, void* closure_data);
typedef void (*KineticProto_Setup_Closure)(const KineticProto_Setup* message, void* closure_data);
typedef void (*KineticProto_P2POperation_Operation_Closure)(const KineticProto_P2POperation_Operation* message, void* closure_data);
typedef void (*KineticProto_P2POperation_Peer_Closure)(const KineticProto_P2POperation_Peer* message, void* closure_data);
typedef void (*KineticProto_P2POperation_Closure)(const KineticProto_P2POperation* message, void* closure_data);
typedef void (*KineticProto_GetLog_Utilization_Closure)(const KineticProto_GetLog_Utilization* message, void* closure_data);
typedef void (*KineticProto_GetLog_Temperature_Closure)(const KineticProto_GetLog_Temperature* message, void* closure_data);
typedef void (*KineticProto_GetLog_Capacity_Closure)(const KineticProto_GetLog_Capacity* message, void* closure_data);
typedef void (*KineticProto_GetLog_Configuration_Interface_Closure)(const KineticProto_GetLog_Configuration_Interface* message, void* closure_data);
typedef void (*KineticProto_GetLog_Configuration_Closure)(const KineticProto_GetLog_Configuration* message, void* closure_data);
typedef void (*KineticProto_GetLog_Statistics_Closure)(const KineticProto_GetLog_Statistics* message, void* closure_data);
typedef void (*KineticProto_GetLog_Limits_Closure)(const KineticProto_GetLog_Limits* message, void* closure_data);
typedef void (*KineticProto_GetLog_Closure)(const KineticProto_GetLog* message, void* closure_data);
typedef void (*KineticProto_Security_ACL_Scope_Closure)(const KineticProto_Security_ACL_Scope* message, void* closure_data);
typedef void (*KineticProto_Security_ACL_Closure)(const KineticProto_Security_ACL* message, void* closure_data);
typedef void (*KineticProto_Security_Closure)(const KineticProto_Security* message, void* closure_data);
typedef void (*KineticProto_Closure)(const KineticProto* message, void* closure_data);

/* --- services --- */

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor KineticProto_descriptor;
extern const ProtobufCMessageDescriptor KineticProto_command_descriptor;
extern const ProtobufCMessageDescriptor KineticProto_header_descriptor;
extern const ProtobufCMessageDescriptor KineticProto_body_descriptor;
extern const ProtobufCMessageDescriptor KineticProto_status_descriptor;
extern const ProtobufCEnumDescriptor    KineticProto_status_status_code_descriptor;
extern const ProtobufCMessageDescriptor KineticProto_key_value_descriptor;
extern const ProtobufCMessageDescriptor KineticProto_range_descriptor;
extern const ProtobufCMessageDescriptor KineticProto_setup_descriptor;
extern const ProtobufCMessageDescriptor KineticProto_p2_poperation_descriptor;
extern const ProtobufCMessageDescriptor KineticProto_p2_poperation_operation_descriptor;
extern const ProtobufCMessageDescriptor KineticProto_p2_poperation_peer_descriptor;
extern const ProtobufCMessageDescriptor KineticProto_get_log_descriptor;
extern const ProtobufCMessageDescriptor KineticProto_get_log_utilization_descriptor;
extern const ProtobufCMessageDescriptor KineticProto_get_log_temperature_descriptor;
extern const ProtobufCMessageDescriptor KineticProto_get_log_capacity_descriptor;
extern const ProtobufCMessageDescriptor KineticProto_get_log_configuration_descriptor;
extern const ProtobufCMessageDescriptor KineticProto_get_log_configuration_interface_descriptor;
extern const ProtobufCMessageDescriptor KineticProto_get_log_statistics_descriptor;
extern const ProtobufCMessageDescriptor KineticProto_get_log_limits_descriptor;
extern const ProtobufCEnumDescriptor    KineticProto_get_log_type_descriptor;
extern const ProtobufCMessageDescriptor KineticProto_security_descriptor;
extern const ProtobufCMessageDescriptor KineticProto_security_acl_descriptor;
extern const ProtobufCMessageDescriptor KineticProto_security_acl_scope_descriptor;
extern const ProtobufCEnumDescriptor    KineticProto_security_acl_hmacalgorithm_descriptor;
extern const ProtobufCEnumDescriptor    KineticProto_security_acl_permission_descriptor;
extern const ProtobufCEnumDescriptor    KineticProto_synchronization_descriptor;
extern const ProtobufCEnumDescriptor    KineticProto_algorithm_descriptor;
extern const ProtobufCEnumDescriptor    KineticProto_message_type_descriptor;

PROTOBUF_C__END_DECLS

#endif  /* _KINETIC_PROTO_H */
